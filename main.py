import os
import difflib
import re
import base64
import aiohttp
import telegram
from telegram import Update, File
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
from user_data_manager import get_user, update_user

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
user_states = {}
user_histories = {}

QUESTION_FLOW = [
    ("name", "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"),
    ("age", "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"),
    ("gender", "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª? (–º/–∂)"),
    ("current_weight", "–°–∫–æ–ª—å–∫–æ —Ç—ã —Å–µ–π—á–∞—Å –≤–µ—Å–∏—à—å?"),
    ("goal", "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –ø—Ä–æ—Å—Ç–æ –ó–û–ñ –∏ —Ç.–ø.)"),
    ("experience", "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞?"),
    ("food_prefs", "–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–≤–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)"),
    ("health_limits", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?"),
    ("equipment", "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã –∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å?"),
    ("metrics", "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?")
]

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    update_user(user_id, {"question_index": 0})
    first_question = QUESTION_FLOW[0][1]
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. "
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã üôå"
    )
    await update.message.reply_text(first_question)

# --- –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ ---
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_histories.pop(user_id, None)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº")

# --- –ó–∞–≥–ª—É—à–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ API Gemini. –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç Google!")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }

def extract_user_facts(text: str) -> dict:
    facts = {}

    weight_match = re.search(r'–≤–µ—à—É\s*(\d{2,3})', text)
    if weight_match:
        facts["current_weight"] = weight_match.group(1)

    age_match = re.search(r'–º–Ω–µ\s*(\d{1,2})\s*–ª–µ—Ç', text)
    if age_match:
        facts["age"] = age_match.group(1)

    goal_match = re.search(r'—Ü–µ–ª—å.*?(–ø–æ—Ö—É–¥–µ—Ç—å|–Ω–∞–±—Ä–∞—Ç—å|–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)', text)
    if goal_match:
        facts["goal"] = goal_match.group(1)

    return facts

def interpret_answer(key: str, user_input: str) -> str:
    input_lower = user_input.lower().strip()

    if key == "goal":
        # –ü—Ä–∏–º–µ—Ä—ã —Ü–µ–ª–µ–π
        goals = {
            "–ø–æ—Ö—É–¥–µ—Ç—å": ["–ø–æ—Ö—É–¥–µ—Ç—å", "—Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å", "—É–º–µ–Ω—å—à–∏—Ç—å –∂–∏—Ä", "–ø–æ—Ö—É–¥–∞–Ω–∏–µ"],
            "–Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É": ["–Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É", "–Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å", "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã", "–Ω–æ–±—Ä–∞—Ç—å –º—ã—à–∏—á–Ω—É—é –º–∞—Å—Å—É"],
            "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É": ["–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å", "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É", "–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ"]
        }
        for clean_goal, variations in goals.items():
            for variant in variations:
                if variant in input_lower:
                    return clean_goal
        return "–¥—Ä—É–≥–∞—è —Ü–µ–ª—å"

    if key == "activity":
        levels = {
            "–Ω–∏–∑–∫–∏–π": ["–Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å", "—Ä–µ–¥–∫–æ", "–Ω–∏–∑–∫–∏–π", "–ø–æ—á—Ç–∏ –Ω–µ –¥–≤–∏–≥–∞—é—Å—å"],
            "—Å—Ä–µ–¥–Ω–∏–π": ["–∏–Ω–æ–≥–¥–∞", "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑", "—Å—Ä–µ–¥–Ω–∏–π", "—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"],
            "–≤—ã—Å–æ–∫–∏–π": ["—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å —á–∞—Å—Ç–æ", "–≤—ã—Å–æ–∫–∏–π", "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "—Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ"]
        }
        for level, phrases in levels.items():
            for phrase in phrases:
                if phrase in input_lower:
                    return level
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if key in ["age", "current_weight", "desired_weight"]:
        numbers = re.findall(r'\d{2,3}', input_lower)
        if numbers:
            return numbers[0]

    if key == "gender":
        if "–∂–µ–Ω" in input_lower:
            return "–∂–µ–Ω—Å–∫–∏–π"
        if "–º—É–∂" in input_lower:
            return "–º—É–∂—Å–∫–æ–π"
        return "–Ω–µ —É–∫–∞–∑–∞–Ω"

    return user_input.strip()

def detect_correction(text: str):
    corrections = ["–æ–π", "–≤–µ—Ä–Ω–µ–µ", "–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ", "–Ω–µ", "—Ç–æ—á–Ω–µ–µ", "–æ—à–∏–±—Å—è", "–∏–º–µ–ª –≤ –≤–∏–¥—É"]
    return any(phrase in text.lower() for phrase in corrections)

def guess_corrected_field(text: str, user_data: dict):
    text = text.lower()
    if "–∑–æ–≤—É—Ç" in text or "—è" in text and len(text.split()) == 2:
        return "name"
    if any(word in text for word in ["–ª–µ—Ç", "–≤–æ–∑—Ä–∞—Å—Ç", "–º–Ω–µ", "–≥–æ–¥–∞", "–≥–æ–¥—É"]):
        return "age"
    if "–≤–µ—à—É" in text or "–≤–µ—Å" in text:
        return "current_weight"
    if "—Ü–µ–ª—å" in text or "—Ö–æ—á—É" in text:
        return "goal"
    if "–º" in text or "–∂" in text or "–ø–æ–ª" in text:
        return "gender"
    return None

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    if detect_correction(text):
        field = guess_corrected_field(text, user)
        if field:
            new_value = interpret_answer(field, text)
            update_user(user_id, {field: new_value})
            await update.message.reply_text(f"–ü–æ–Ω—è–ª, –æ–±–Ω–æ–≤–∏–ª {field}: {new_value}")

            # –ü—Ä–æ–¥–æ–ª–∂–∏–º –∞–Ω–∫–µ—Ç—É —Å –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            question_index = get_question_index(field)
            if question_index < len(QUESTION_FLOW):
                update_user(user_id, {"question_index": question_index})
                await update.message.reply_text(QUESTION_FLOW[question_index][1])
            return
    text_lower = text.lower()
    user = get_user(user_id)

    question_index = user.get("question_index", 0)

    # –≠—Ç–∞–ø –∞–Ω–∫–µ—Ç—ã
    if question_index is not None and question_index < len(QUESTION_FLOW):
        key, _ = QUESTION_FLOW[question_index]
        cleaned_value = interpret_answer(key, text)
        update_user(user_id, {key: cleaned_value})

        question_index += 1
        if question_index < len(QUESTION_FLOW):
            next_question = QUESTION_FLOW[question_index][1]
            update_user(user_id, {"question_index": question_index})
            await update.message.reply_text(next_question)
        else:
            update_user(user_id, {"question_index": None})
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É üéØ")
            await update.message.reply_text("–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?")
        return
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
    extracted = extract_user_facts(text_lower)
    if extracted:
        update_user(user_id, extracted)
        await update.message.reply_text("–Ø –∑–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ!")

    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if "—Å–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç" in text_lower:
        age = user.get("age") or extracted.get("age")
        if age:
            await update.message.reply_text(f"–¢—ã –ø–∏—Å–∞–ª(–∞), —á—Ç–æ —Ç–µ–±–µ {age} –ª–µ—Ç.")
        else:
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.")
        return

    if "–≤–µ—à—É" in text_lower or "–º–æ–π –≤–µ—Å" in text_lower:
        weight = user.get("current_weight") or extracted.get("current_weight")
        if weight:
            await update.message.reply_text(f"–¢—ã –ø–∏—Å–∞–ª(–∞), —á—Ç–æ –≤–µ—Å–∏—à—å {weight} –∫–≥.")
        else:
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–≤–æ–π –≤–µ—Å.")
        return

    # –ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã
    await update.message.reply_text(
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏–ª–∏ –∫–∞–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–¥–æ–π–¥—É—Ç?")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("generate_image", generate_image))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ NutriBot –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ñ–∞–π–ª–æ–≤ –∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    app.run_polling()
