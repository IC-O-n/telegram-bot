import os
import re
import base64
import aiohttp
import sqlite3
import telegram
from collections import deque
from telegram import Update, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, CallbackContext, ConversationHandler
)
import google.generativeai as genai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

user_histories = {}
user_profiles = {}

(
    ASK_NAME, ASK_GENDER, ASK_AGE, ASK_WEIGHT, ASK_GOAL,
    ASK_ACTIVITY, ASK_DIET_PREF, ASK_HEALTH, ASK_EQUIPMENT, ASK_TARGET
) = range(10)

def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_profiles (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        gender TEXT,
        age INTEGER,
        weight REAL,
        goal TEXT,
        activity TEXT,
        diet TEXT,
        health TEXT,
        equipment TEXT,
        target_metric TEXT,
        custom_facts TEXT
    )
    ''')
    conn.commit()
    conn.close()
    migrate_db()

def save_user_profile(user_id: int, profile: dict):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ custom_facts
    cursor.execute("SELECT custom_facts FROM user_profiles WHERE user_id = ?", (user_id,))
    existing_facts = cursor.fetchone()
    current_facts = existing_facts[0] if existing_facts and existing_facts[0] else ""
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    new_facts = profile.get("custom_facts", "")
    if new_facts and current_facts:
        combined_facts = f"{current_facts}\n{new_facts}"
    elif new_facts:
        combined_facts = new_facts
    else:
        combined_facts = current_facts
    
    cursor.execute('''
    INSERT OR REPLACE INTO user_profiles
    (user_id, name, gender, age, weight, goal, activity, diet, health, equipment, target_metric, custom_facts)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        profile.get("name"),
        profile.get("gender"),
        profile.get("age"),
        profile.get("weight"),
        profile.get("goal"),
        profile.get("activity"),
        profile.get("diet"),
        profile.get("health"),
        profile.get("equipment"),
        profile.get("target_metric"),
        combined_facts
    ))
    conn.commit()
    conn.close()

async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }

async def validate_response(prompt: str, user_response: str, current_state: int) -> tuple:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é Gemini"""
    validation_prompts = {
        ASK_NAME: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∏–º—è. –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –∏–º—è. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —ç—Ç–æ –∏–º—è, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–º—è.",
        ASK_GENDER: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–æ–ª. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Ç–≤–µ—Ç—ã: '–º' –∏–ª–∏ '–∂'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –Ω–µ—Ç.",
        ASK_AGE: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 120. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –Ω–µ—Ç.",
        ASK_WEIGHT: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥ (—á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 300). –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –Ω–µ—Ç.",
        ASK_GOAL: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª—å: '–ü–æ—Ö—É–¥–µ—Ç—å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', '–†–µ–ª—å–µ—Ñ' –∏–ª–∏ '–ü—Ä–æ—Å—Ç–æ –ó–û–ñ'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –Ω–µ—Ç.",
        ASK_ACTIVITY: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: '–ù–æ–≤–∏—á–æ–∫', '–°—Ä–µ–¥–Ω–∏–π' –∏–ª–∏ '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –Ω–µ—Ç.",
        ASK_DIET_PREF: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π.",
        ASK_HEALTH: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π.",
        ASK_EQUIPMENT: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π.",
        ASK_TARGET: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É. –õ—é–±–æ–π —Ç–µ–∫—Å—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'VALID' –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π, –∏–ª–∏ 'INVALID' –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π.",
    }
    
    response = model.generate_content([
        {"text": validation_prompts[current_state]},
        {"text": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: {user_response}"}
    ])
    
    return "VALID" in response.text

async def check_profile_update(message: str) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    response = model.generate_content([
        {"text": """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ–Ω —è–≤–Ω–æ —Ö–æ—á–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å –∏ —Ç.–¥.), –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
FIELD: <–ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è>
VALUE: <–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ>
–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –æ—Ç–≤–µ—Ç—å 'NO'"""},
        {"text": message}
    ])
    
    if "FIELD:" in response.text and "VALUE:" in response.text:
        field = response.text.split("FIELD:")[1].split("VALUE:")[0].strip()
        value = response.text.split("VALUE:")[1].strip()
        return (field, value)
    return None

async def check_custom_fact(message: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    response = model.generate_content([
        {"text": """–û–ø—Ä–µ–¥–µ–ª–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—É –º–µ–Ω—è –Ω–µ—Ç –Ω–æ–≥–∏", "—è –ª—é–±–ª—é —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –≤–µ—á–µ—Ä–∞–º"). 
–ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç - –≤–µ—Ä–Ω–∏ —ç—Ç–æ—Ç —Ñ–∞–∫—Ç. –ï—Å–ª–∏ –Ω–µ—Ç - –≤–µ—Ä–Ω–∏ 'NO'."""},
        {"text": message}
    ])
    
    return response.text if response.text != "NO" else None

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã üôå\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME


def migrate_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ custom_facts
    cursor.execute("PRAGMA table_info(user_profiles)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if "custom_facts" not in columns:
        try:
            cursor.execute("ALTER TABLE user_profiles ADD COLUMN custom_facts TEXT")
            conn.commit()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞: –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü custom_facts")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    conn.close()


async def handle_questionnaire(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_response = update.message.text
    current_state = context.user_data.get("current_state", ASK_NAME)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        profile_update = await check_profile_update(user_response)
        if profile_update:
            field, value = profile_update
            if user_id not in user_profiles:
                user_profiles[user_id] = {}
            user_profiles[user_id][field] = value
            save_user_profile(user_id, {field: value})
            await update.message.reply_text(f"–û–±–Ω–æ–≤–∏–ª {field} –Ω–∞ '{value}'! –ü—Ä–æ–¥–æ–ª–∂–∏–º –∞–Ω–∫–µ—Ç—É.")
            return current_state

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        custom_fact = await check_custom_fact(user_response)
        if custom_fact:
            try:
                save_user_profile(user_id, {"custom_facts": custom_fact})
                await update.message.reply_text("–ó–∞–ø–æ–º–Ω–∏–ª —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –∞–Ω–∫–µ—Ç—É.")
                return current_state
            except Exception as e:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
                return current_state

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        is_valid = await validate_response(user_response, user_response, current_state)
        
        if not is_valid:
            error_messages = {
                ASK_NAME: "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—ë –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è.",
                ASK_GENDER: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ '–º' –∏–ª–∏ '–∂'.",
                ASK_AGE: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 120.",
                ASK_WEIGHT: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º –æ—Ç 20 –¥–æ 300 –∫–≥.",
                ASK_GOAL: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ü–µ–ª–µ–π: '–ü–æ—Ö—É–¥–µ—Ç—å', '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É', '–†–µ–ª—å–µ—Ñ' –∏–ª–∏ '–ü—Ä–æ—Å—Ç–æ –ó–û–ñ'.",
                ASK_ACTIVITY: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å: '–ù–æ–≤–∏—á–æ–∫', '–°—Ä–µ–¥–Ω–∏–π' –∏–ª–∏ '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'.",
                ASK_DIET_PREF: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ.",
                ASK_HEALTH: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é.",
                ASK_EQUIPMENT: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.",
                ASK_TARGET: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ—é —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É.",
            }
            await update.message.reply_text(error_messages[current_state])
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question_messages = {
                ASK_NAME: "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                ASK_GENDER: "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):",
                ASK_AGE: "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
                ASK_WEIGHT: "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?",
                ASK_GOAL: "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ—Ç—å, –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –†–µ–ª—å–µ—Ñ, –ü—Ä–æ—Å—Ç–æ –ó–û–ñ)",
                ASK_ACTIVITY: "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–æ–ø—ã—Ç–∞? (–ù–æ–≤–∏—á–æ–∫, –°—Ä–µ–¥–Ω–∏–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
                ASK_DIET_PREF: "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–í–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)",
                ASK_HEALTH: "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?",
                ASK_EQUIPMENT: "–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?",
                ASK_TARGET: "–ö–∞–∫–∞—è —É —Ç–µ–±—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?",
            }
            await update.message.reply_text(question_messages[current_state])
            return current_state

        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if user_id not in user_profiles:
            user_profiles[user_id] = {}
        
        field_names = {
            ASK_NAME: "name",
            ASK_GENDER: "gender",
            ASK_AGE: "age",
            ASK_WEIGHT: "weight",
            ASK_GOAL: "goal",
            ASK_ACTIVITY: "activity",
            ASK_DIET_PREF: "diet",
            ASK_HEALTH: "health",
            ASK_EQUIPMENT: "equipment",
            ASK_TARGET: "target_metric",
        }

        field_name = field_names[current_state]
        user_profiles[user_id][field_name] = user_response.lower() if current_state == ASK_GENDER else user_response

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
        next_questions = {
            ASK_NAME: ("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):", ASK_GENDER),
            ASK_GENDER: ("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", ASK_AGE),
            ASK_AGE: ("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?", ASK_WEIGHT),
            ASK_WEIGHT: ("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ—Ç—å, –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –†–µ–ª—å–µ—Ñ, –ü—Ä–æ—Å—Ç–æ –ó–û–ñ)", ASK_GOAL),
            ASK_GOAL: ("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–æ–ø—ã—Ç–∞? (–ù–æ–≤–∏—á–æ–∫, –°—Ä–µ–¥–Ω–∏–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)", ASK_ACTIVITY),
            ASK_ACTIVITY: ("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–í–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)", ASK_DIET_PREF),
            ASK_DIET_PREF: ("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?", ASK_HEALTH),
            ASK_HEALTH: ("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?", ASK_EQUIPMENT),
            ASK_EQUIPMENT: ("–ö–∞–∫–∞—è —É —Ç–µ–±—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?", ASK_TARGET),
            ASK_TARGET: ("", None),  # –ö–æ–Ω–µ—Ü –∞–Ω–∫–µ—Ç—ã
        }

        next_question, next_state = next_questions[current_state]

        if next_state is None:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
            save_user_profile(user_id, user_profiles[user_id])
            name = user_profiles[user_id]["name"]
            await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!")
            return ConversationHandler.END
        else:
            await update.message.reply_text(next_question)
            context.user_data["current_state"] = next_state
            return next_state

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_questionnaire: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.")
        return current_state


async def show_profile(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.")
        return

    profile_text = (
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {row[1]}\n–ü–æ–ª: {row[2]}\n–í–æ–∑—Ä–∞—Å—Ç: {row[3]}\n–í–µ—Å: {row[4]} –∫–≥\n"
        f"–¶–µ–ª—å: {row[5]}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row[6]}\n–ü–∏—Ç–∞–Ω–∏–µ: {row[7]}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {row[8]}\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row[9]}\n–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row[10]}\n"
        f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n{row[11] if row[11] else '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}"
    )
    await update.message.reply_text(profile_text)

async def reset(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_histories.pop(user_id, None)
    user_profiles.pop(user_id, None)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº")

async def generate_image(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API Gemini ÔøΩ")

def get_user_profile_text(user_id: int) -> str:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        return "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."

    return (
        f"–ò–º—è: {row[1]}\n"
        f"–ü–æ–ª: {row[2]}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {row[3]}\n"
        f"–í–µ—Å: {row[4]} –∫–≥\n"
        f"–¶–µ–ª—å: {row[5]}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row[6]}\n"
        f"–ü–∏—Ç–∞–Ω–∏–µ: {row[7]}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {row[8]}\n"
        f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row[9]}\n"
        f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row[10]}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {row[11] if row[11] else '–ù–µ—Ç'}"
    )

async def handle_message(update: Update, context: CallbackContext) -> None:
    message = update.message
    user_id = message.from_user.id
    user_text = message.caption or message.text or ""
    contents = []

    media_files = message.photo or []
    if message.document:
        media_files.append(message.document)

    for file in media_files:
        try:
            part = await download_and_encode(file)
            contents.append(part)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return

    if user_text:
        contents.insert(0, {"text": user_text})
    if not contents:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_info = get_user_profile_text(user_id)
    if profile_info and "–Ω–µ –Ω–∞–π–¥–µ–Ω" not in profile_info:
        contents.insert(0, {"text": f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{profile_info}"})

    # –ò—Å—Ç–æ—Ä–∏—è
    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=5)
    user_histories[user_id].append(user_text)
    history_messages = list(user_histories[user_id])
    if history_messages:
        history_prompt = "\n".join(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}" for msg in history_messages)
        contents.insert(0, {"text": f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{history_prompt}"})

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    GEMINI_SYSTEM_PROMPT = """–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å:
- –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è –Ω–∞–±—Ä–∞–ª 3 –∫–≥" –∏–ª–∏ "–º–Ω–µ —Ç–µ–ø–µ—Ä—å 20 –ª–µ—Ç")
- —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–±–∞–≤—å —ç—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")

–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ user_profiles —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
- user_id INTEGER PRIMARY KEY
- name TEXT
- gender TEXT
- age INTEGER
- weight REAL
- goal TEXT
- activity TEXT
- diet TEXT
- health TEXT
- equipment TEXT
- target_metric TEXT
- custom_facts TEXT

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —á—ë—Ç–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ç.–ø.) ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π:
    SQL: <SQL-–∑–∞–ø—Ä–æ—Å>
    TEXT: <–æ—Ç–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ>

2. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—á—Ç–æ –ø–æ–µ—Å—Ç—å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?" –∏–ª–∏ "—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?") ‚Äî –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π SQL. –ü—Ä–æ—Å—Ç–æ –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–ª–æ–∫–µ:
    TEXT: ...

3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –≥–æ–≤–æ—Ä–∏—Ç "–¥–æ–±–∞–≤—å —ç—Ç–æ –≤ –º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å" ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≥–æ—Ä–Ω—ã–π –≤–µ–ª–æ—Å–∏–ø–µ–¥ Stern"), –∞ –Ω–µ —Å–ª–æ–≤–æ "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ".

4. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—É –º–µ–Ω—è –Ω–µ—Ç –Ω–æ–≥–∏", "—è –ª—é–±–ª—é —Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –≤–µ—á–µ—Ä–∞–º"), –¥–æ–±–∞–≤—å –µ–≥–æ –≤ custom_facts.

5. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –Ω–µ —á—Ä–µ–∑–º–µ—Ä–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–º. –°—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞.

‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∏–∑–º–µ–Ω–∏", "–¥–æ–±–∞–≤—å", "–º–æ–π –≤–µ—Å —Ç–µ–ø–µ—Ä—å..." –∏ —Ç.–ø.)

–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
SQL: ...
TEXT: ...
–∏–ª–∏
TEXT: ...
"""
    contents.insert(0, {"text": GEMINI_SYSTEM_PROMPT})

    try:
        response = model.generate_content(contents)
        response_text = response.text.strip()

        # –†–∞–∑–¥–µ–ª–∏–º SQL –∏ TEXT
        sql_match = re.search(r"SQL:\s*(.*?)\nTEXT:", response_text, re.DOTALL)
        text_match = re.search(r"TEXT:\s*(.+)", response_text, re.DOTALL)

        if sql_match:
            sql_query = sql_match.group(1).strip()

            try:
                conn = sqlite3.connect("users.db")
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ SQL-–∑–∞–ø—Ä–æ—Å –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
                if "?" in sql_query:
                    cursor.execute(sql_query, (user_id,))
                else:
                    cursor.execute(sql_query)

                conn.commit()
                conn.close()
            except Exception as e:
                await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
                return

        if text_match:
            reply_text = text_match.group(1).strip()
            await message.reply_text(reply_text)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å
            await message.reply_text(response_text)

    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_DIET_PREF: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_HEALTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
            ASK_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_questionnaire)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("profile", show_profile))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("generate_image", generate_image))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
