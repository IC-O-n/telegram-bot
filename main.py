import os
import re
import base64
import aiohttp
import sqlite3
import pytz
import telegram
import json
import pymysql
from pymysql.cursors import DictCursor
from datetime import datetime, time, date
from collections import deque
from telegram import Update, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, CallbackContext, ConversationHandler
)
import google.generativeai as genai
from datetime import datetime, time, timedelta


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

user_histories = {}
user_profiles = {}

(
    ASK_LANGUAGE, ASK_NAME, ASK_GENDER, ASK_AGE, ASK_WEIGHT, ASK_HEIGHT,
    ASK_GOAL, ASK_ACTIVITY, ASK_DIET_PREF, ASK_HEALTH, ASK_EQUIPMENT, 
    ASK_TARGET, ASK_TIMEZONE, ASK_WAKEUP_TIME, ASK_SLEEP_TIME, ASK_WATER_REMINDERS
) = range(16)



def init_db():
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_profiles (
                    user_id BIGINT PRIMARY KEY,
                    language VARCHAR(10),
                    name VARCHAR(100),
                    gender VARCHAR(10),
                    age INT,
                    weight FLOAT,
                    height INT,
                    goal TEXT,
                    activity TEXT,
                    diet TEXT,
                    health TEXT,
                    equipment TEXT,
                    target_metric TEXT,
                    unique_facts TEXT,
                    timezone VARCHAR(50),
                    wakeup_time VARCHAR(5),
                    sleep_time VARCHAR(5),
                    water_reminders TINYINT DEFAULT 1,
                    water_drunk_today INT DEFAULT 0,
                    last_water_notification TEXT,
                    calories_today INT DEFAULT 0,
                    proteins_today INT DEFAULT 0,
                    fats_today INT DEFAULT 0,
                    carbs_today INT DEFAULT 0,
                    last_nutrition_update DATE,
                    reminders TEXT
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
            """)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            cursor.execute("""
                SELECT COLUMN_NAME 
                FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = DATABASE() 
                AND TABLE_NAME = 'user_profiles'
            """)
            existing_columns = {row['COLUMN_NAME'] for row in cursor.fetchall()}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            if 'reminders' not in existing_columns:
                cursor.execute("ALTER TABLE user_profiles ADD COLUMN reminders TEXT")
            
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        conn.close()


def save_user_profile(user_id: int, profile: dict):
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ reminders –≤ –∑–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
            reminders = json.dumps(profile.get("reminders", []))
            
            cursor.execute('''
            INSERT INTO user_profiles (
                user_id, language, name, gender, age, weight, height, goal, activity, diet, 
                health, equipment, target_metric, unique_facts, timezone, wakeup_time, sleep_time,
                water_reminders, water_drunk_today, last_water_notification,
                calories_today, proteins_today, fats_today, carbs_today, last_nutrition_update, reminders
            ) VALUES (
                %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 
                %s, %s, %s, %s, %s, %s, %s, 
                %s, %s, %s,
                %s, %s, %s, %s, %s, %s
            )
            ON DUPLICATE KEY UPDATE
                language = VALUES(language),
                name = VALUES(name),
                gender = VALUES(gender),
                age = VALUES(age),
                weight = VALUES(weight),
                height = VALUES(height),
                goal = VALUES(goal),
                activity = VALUES(activity),
                diet = VALUES(diet),
                health = VALUES(health),
                equipment = VALUES(equipment),
                target_metric = VALUES(target_metric),
                unique_facts = VALUES(unique_facts),
                timezone = VALUES(timezone),
                wakeup_time = VALUES(wakeup_time),
                sleep_time = VALUES(sleep_time),
                water_reminders = VALUES(water_reminders),
                water_drunk_today = VALUES(water_drunk_today),
                last_water_notification = VALUES(last_water_notification),
                calories_today = VALUES(calories_today),
                proteins_today = VALUES(proteins_today),
                fats_today = VALUES(fats_today),
                carbs_today = VALUES(carbs_today),
                last_nutrition_update = VALUES(last_nutrition_update),
                reminders = VALUES(reminders)
            ''', (
                user_id,
                profile.get("language"),
                profile.get("name"),
                profile.get("gender"),
                profile.get("age"),
                profile.get("weight"),
                profile.get("height"),
                profile.get("goal"),
                profile.get("activity"),
                profile.get("diet"),
                profile.get("health"),
                profile.get("equipment"),
                profile.get("target_metric"),
                profile.get("unique_facts"),
                profile.get("timezone"),
                profile.get("wakeup_time"),
                profile.get("sleep_time"),
                profile.get("water_reminders", 1),
                profile.get("water_drunk_today", 0),
                profile.get("last_water_notification", ""),
                profile.get("calories_today", 0),
                profile.get("proteins_today", 0),
                profile.get("fats_today", 0),
                profile.get("carbs_today", 0),
                profile.get("last_nutrition_update", date.today().isoformat()),
                reminders
            ))
        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise
    finally:
        conn.close()


async def reset_daily_nutrition_if_needed(user_id: int):
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT last_nutrition_update FROM user_profiles WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            
            if result and result['last_nutrition_update']:
                last_update = result['last_nutrition_update']
                if last_update < date.today():
                    cursor.execute('''
                        UPDATE user_profiles 
                        SET calories_today = 0, proteins_today = 0, fats_today = 0, carbs_today = 0,
                            last_nutrition_update = %s, water_drunk_today = 0
                        WHERE user_id = %s
                    ''', (date.today().isoformat(), user_id))
                    conn.commit()
    finally:
        conn.close()

async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }


async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è / Hello! I'm your personal fitness assistant NutriBot. Please choose your preferred language:\n\n"
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π - –æ—Ç–ø—Ä–∞–≤—å 'ru'\n"
        "üá¨üáß English - send 'en'"
    )
    return ASK_LANGUAGE


async def ask_name(update: Update, context: CallbackContext) -> int:
    language = update.message.text.lower()
    if language not in ["ru", "en"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ 'ru' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏–ª–∏ 'en' –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ / Please choose 'ru' for Russian or 'en' for English"
        )
        return ASK_LANGUAGE
    
    user_id = update.message.from_user.id
    user_profiles[user_id] = {"language": language}
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        await update.message.reply_text("What's your name?")
    return ASK_NAME

async def ask_gender(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["name"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):")
    else:
        await update.message.reply_text("Specify your gender (m/f):")
    return ASK_GENDER

async def ask_age(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    gender = update.message.text.lower()
    
    if language == "ru":
        valid_genders = ["–º", "–∂"]
        error_msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ '–º' –∏–ª–∏ '–∂'."
    else:
        valid_genders = ["m", "f"]
        error_msg = "Please specify only 'm' or 'f'."
    
    if gender not in valid_genders:
        await update.message.reply_text(error_msg)
        return ASK_GENDER
    
    user_profiles[user_id]["gender"] = gender
    
    if language == "ru":
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    else:
        await update.message.reply_text("How old are you?")
    return ASK_AGE

async def ask_weight(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    
    try:
        age = int(update.message.text)
    except ValueError:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        else:
            await update.message.reply_text("Please enter your age as a number.")
        return ASK_AGE
    
    user_profiles[user_id]["age"] = age
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
    else:
        await update.message.reply_text("What's your current weight (in kg)?")
    return ASK_WEIGHT

async def ask_height(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    
    try:
        weight = float(update.message.text.replace(",", "."))
    except ValueError:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º.")
        else:
            await update.message.reply_text("Please enter your weight as a number.")
        return ASK_WEIGHT
    
    user_profiles[user_id]["weight"] = weight
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")
    else:
        await update.message.reply_text("What's your height (in cm)?")
    return ASK_HEIGHT

async def ask_goal(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    
    try:
        height = int(update.message.text)
        if height < 100 or height > 250:
            if language == "ru":
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º).")
            else:
                await update.message.reply_text("Please enter a realistic height (100-250 cm).")
            return ASK_HEIGHT
    except ValueError:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–æ—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö.")
        else:
            await update.message.reply_text("Please enter your height as a whole number in centimeters.")
        return ASK_HEIGHT
    
    user_profiles[user_id]["height"] = height
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ—Ç—å, –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –†–µ–ª—å–µ—Ñ, –ü—Ä–æ—Å—Ç–æ –ó–û–ñ)")
    else:
        await update.message.reply_text("What's your goal? (Lose weight, Gain mass, Get toned, Just healthy lifestyle)")
    return ASK_GOAL

async def ask_activity(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["goal"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–æ–ø—ã—Ç–∞? (–ù–æ–≤–∏—á–æ–∫, –°—Ä–µ–¥–Ω–∏–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)")
    else:
        await update.message.reply_text("What's your activity/experience level? (Beginner, Intermediate, Advanced)")
    return ASK_ACTIVITY

async def ask_diet_pref(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["activity"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–í–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)")
    else:
        await update.message.reply_text("Do you have any dietary preferences? (Vegan, gluten-free, etc.)")
    return ASK_DIET_PREF

async def ask_health(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["diet"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?")
    else:
        await update.message.reply_text("Do you have any health restrictions?")
    return ASK_HEALTH

async def ask_equipment(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["health"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?")
    else:
        await update.message.reply_text("What equipment do you have available?")
    return ASK_EQUIPMENT

async def ask_target(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["equipment"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?")
    else:
        await update.message.reply_text("What's your specific weight or other metric target?")
    return ASK_TARGET


async def ask_timezone(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    user_profiles[user_id]["target_metric"] = update.message.text
    
    if language == "ru":
        await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è? (–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –∏–ª–∏ Europe/Moscow, –∏–ª–∏ UTC+3)")
    else:
        await update.message.reply_text("What city or timezone are you in? (e.g. New York, or America/New_York, or UTC-5)")
    return ASK_TIMEZONE


async def ask_wakeup_time(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    timezone_input = update.message.text.strip()
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    try:
        if timezone_input.startswith(("UTC+", "UTC-", "GMT+", "GMT-")):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UTC+3 –≤ Etc/GMT-3 (–∑–Ω–∞–∫–∏ –æ–±—Ä–∞—Ç–Ω—ã–µ)
            offset_str = timezone_input[3:]
            offset = int(offset_str) if offset_str else 0
            tz = pytz.timezone(f"Etc/GMT{-offset}" if offset > 0 else f"Etc/GMT{+offset}")
        elif timezone_input.startswith("+"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "+3"
            offset = int(timezone_input[1:])
            tz = pytz.timezone(f"Etc/GMT{-offset}")
        elif timezone_input.startswith("-"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "-5"
            offset = int(timezone_input[1:])
            tz = pytz.timezone(f"Etc/GMT{+offset}")
        elif "/" in timezone_input:
            tz = pytz.timezone(timezone_input)
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö pytz
            try:
                tz = pytz.timezone(timezone_input)
            except pytz.UnknownTimeZoneError:
                # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC –∫–∞–∫ fallback
                tz = pytz.UTC
        
        user_profiles[user_id]["timezone"] = tz.zone
        print(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {tz.zone}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –∫–∞–∫ fallback
        user_profiles[user_id]["timezone"] = "UTC"
    
    if language == "ru":
        await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? (–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 07:30)")
    else:
        await update.message.reply_text("What time do you usually wake up? (Format: HH:MM, e.g. 07:30)")
    return ASK_WAKEUP_TIME


async def ask_sleep_time(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    
    # First try in-memory storage
    if user_id not in user_profiles:
        # Fallback to database
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT language FROM user_profiles WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            # Reconstruct minimal profile from database
            user_profiles[user_id] = {"language": row[0]}
        else:
            # If not found anywhere, restart questionnaire
            await update.message.reply_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start\nSession expired. Please start again with /start")
            return ConversationHandler.END
    
    language = user_profiles[user_id].get("language", "ru")
    
    try:
        wakeup_time = datetime.strptime(update.message.text, "%H:%M").time()
        user_profiles[user_id]["wakeup_time"] = update.message.text
    except ValueError:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)")
        else:
            await update.message.reply_text("Please enter time in HH:MM format (e.g. 07:30)")
        return ASK_WAKEUP_TIME
    
    if language == "ru":
        await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? (–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 23:00)")
    else:
        await update.message.reply_text("What time do you usually go to sleep? (Format: HH:MM, e.g. 23:00)")
    return ASK_SLEEP_TIME


async def ask_water_reminders(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    
    try:
        sleep_time = datetime.strptime(update.message.text, "%H:%M").time()
        user_profiles[user_id]["sleep_time"] = update.message.text
    except ValueError:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00)")
        else:
            await update.message.reply_text("Please enter time in HH:MM format (e.g. 23:00)")
        return ASK_SLEEP_TIME
    
    if language == "ru":
        await update.message.reply_text("–•–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è? (–¥–∞/–Ω–µ—Ç)")
    else:
        await update.message.reply_text("Do you want to receive water drinking reminders during the day? (yes/no)")
    return ASK_WATER_REMINDERS


async def finish_questionnaire(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    answer = update.message.text.lower()
    
    if language == "ru":
        valid_answers = ["–¥–∞", "–Ω–µ—Ç"]
    else:
        valid_answers = ["yes", "no"]
    
    if answer not in valid_answers:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
        else:
            await update.message.reply_text("Please answer 'yes' or 'no'")
        return ASK_WATER_REMINDERS
    
    user_profiles[user_id]["water_reminders"] = 1 if answer in ["–¥–∞", "yes"] else 0
    user_profiles[user_id]["water_drunk_today"] = 0
    user_profiles[user_id]["reminders"] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    
    name = user_profiles[user_id]["name"]
    weight = user_profiles[user_id]["weight"]
    recommended_water = int(weight * 30)
    save_user_profile(user_id, user_profiles[user_id])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    current_jobs = context.job_queue.get_jobs_by_name(str(user_id))
    for job in current_jobs:
        job.schedule_removal()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_profiles[user_id]["water_reminders"]:
        context.job_queue.run_repeating(
            check_water_reminder_time,
            interval=300,
            first=10,
            chat_id=update.message.chat_id,
            user_id=user_id,
            name=str(user_id)
        )
        print(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if language == "ru":
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ\n"
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –≤–µ—Å–∞ ({weight} –∫–≥) —Ç–µ–±–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–∏–≤–∞—Ç—å {recommended_water} –º–ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å.\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–∫–ª—é—á–∏—à—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.\n"
            f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!"
        )
    else:
        await update.message.reply_text(
            f"Great, {name}! Questionnaire completed üéâ\n"
            f"Based on your weight ({weight} kg), your recommended daily water intake is {recommended_water} ml.\n"
            f"I'll remind you to drink water during the day unless you disable this feature.\n"
            f"You can send me photos, text or documents - I'll help you with analysis and recommendations!"
        )
    return ConversationHandler.END


async def check_reminders(context: CallbackContext):
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT user_id, reminders, timezone, language 
                FROM user_profiles 
                WHERE reminders != '[]' AND reminders IS NOT NULL
            """)
            users = cursor.fetchall()

        for user in users:
            try:
                if not user['reminders'] or user['reminders'] == '[]':
                    continue
                    
                reminders = json.loads(user['reminders'])
                tz = pytz.timezone(user['timezone']) if user['timezone'] else pytz.UTC
                now = datetime.now(tz)
                current_time = now.strftime("%H:%M")

                for reminder in reminders:
                    if reminder["time"] == current_time and reminder.get("last_sent") != now.date().isoformat():
                        try:
                            if user['language'] == "ru":
                                message = (
                                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}\n\n"
                                    f"(–û—Ç–ø—Ä–∞–≤—å—Ç–µ '—Ö–≤–∞—Ç–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –º–Ω–µ {reminder['text']}' —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)"
                                )
                            else:
                                message = (
                                    f"‚è∞ Reminder: {reminder['text']}\n\n"
                                    f"(Send 'stop reminding me {reminder['text']}' to disable this reminder)"
                                )

                            await context.bot.send_message(chat_id=user['user_id'], text=message)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            reminder["last_sent"] = now.date().isoformat()
                            with conn.cursor() as update_cursor:
                                update_cursor.execute(
                                    "UPDATE user_profiles SET reminders = %s WHERE user_id = %s",
                                    (json.dumps(reminders), user['user_id'])
                                )
                            conn.commit()
                            
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
                print(f"Reminders JSON: {user['reminders']}")
                print(f"Error details: {str(e)}")
    finally:
        conn.close()


async def check_water_reminder_time(context: CallbackContext):
    job = context.job
    user_id = job.user_id
    chat_id = job.chat_id
    
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT timezone, wakeup_time, sleep_time, water_reminders, language, 
                       water_drunk_today, last_water_notification, weight 
                FROM user_profiles 
                WHERE user_id = %s
            """, (user_id,))
            row = cursor.fetchone()
        
        if not row:
            print(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not row['water_reminders']:
            print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        recommended_water = int(row['weight'] * 30)
        
        if row['water_drunk_today'] >= recommended_water:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤—ã–ø–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã")
            return  

        try:
            tz = pytz.timezone(row['timezone']) if row['timezone'] else pytz.UTC
            now = datetime.now(tz)
            current_time = now.time()
            today = now.date()
            
            if row['last_water_notification']:
                try:
                    last_notif_datetime = datetime.strptime(row['last_water_notification'], "%Y-%m-%d %H:%M:%S").replace(tzinfo=tz)
                    time_since_last = now - last_notif_datetime
                    if time_since_last.total_seconds() < 3600:
                        print(f"–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        return
                except ValueError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            wakeup_time = datetime.strptime(row['wakeup_time'], "%H:%M").time()
            sleep_time = datetime.strptime(row['sleep_time'], "%H:%M").time()
            
            wakeup_dt = datetime.combine(today, wakeup_time).astimezone(tz)
            sleep_dt = datetime.combine(today, sleep_time).astimezone(tz)
            current_dt = datetime.combine(today, current_time).astimezone(tz)
            
            if sleep_time < wakeup_time:
                sleep_dt += timedelta(days=1)
            
            is_active_time = wakeup_dt <= current_dt <= sleep_dt
            
            if not is_active_time:
                print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time} –≤–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({wakeup_time}-{sleep_time})")
                return
            
            remaining_water = max(0, recommended_water - row['water_drunk_today'])
            time_since_wakeup = current_dt - wakeup_dt
            hours_since_wakeup = time_since_wakeup.total_seconds() / 3600
            
            reminder_interval = 2
            if hours_since_wakeup >= 0 and hours_since_wakeup % reminder_interval <= 0.1:
                last_notif_hour = None
                if row['last_water_notification']:
                    try:
                        last_notif_datetime = datetime.strptime(row['last_water_notification'], "%Y-%m-%d %H:%M:%S").replace(tzinfo=tz)
                        last_notif_since_wakeup = last_notif_datetime - wakeup_dt
                        last_notif_hour = last_notif_since_wakeup.total_seconds() / 3600
                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
                if last_notif_hour is None or (hours_since_wakeup - last_notif_hour) >= (reminder_interval - 0.1):
                    with conn.cursor() as update_cursor:
                        update_cursor.execute("""
                            UPDATE user_profiles 
                            SET last_water_notification = %s 
                            WHERE user_id = %s
                        """, (now.strftime("%Y-%m-%d %H:%M:%S"), user_id))
                    conn.commit()
                    
                    water_to_drink_now = min(250, max(150, recommended_water // 8))
                    
                    if row['language'] == "ru":
                        message = (
                            f"üíß –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—É! –°–µ–π—á–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å {water_to_drink_now} –º–ª.\n"
                            f"üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {row['water_drunk_today']} –º–ª –∏–∑ {recommended_water} –º–ª\n"
                            f"üö∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª\n\n"
                            f"–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã–ø—å–µ—à—å –≤–æ–¥—É, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                            f"'–í—ã–ø–∏–ª 250 –º–ª' –∏–ª–∏ 'Drank 300 ml'"
                        )
                    else:
                        message = (
                            f"üíß Don't forget to drink water! Now it's recommended to drink {water_to_drink_now} ml.\n"
                            f"üìä Today drunk: {row['water_drunk_today']} ml of {recommended_water} ml\n"
                            f"üö∞ Remaining: {remaining_water} ml\n\n"
                            f"After drinking water, send me a message in the format:\n"
                            f"'Drank 300 ml' or '–í—ã–ø–∏–ª 250 –º–ª'"
                        )
                    
                    await context.bot.send_message(chat_id=chat_id, text=message)
                    print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {now}")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
    finally:
        conn.close()


async def show_profile(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    await reset_daily_nutrition_if_needed(user_id)
    
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM user_profiles WHERE user_id = %s", (user_id,))
            row = cursor.fetchone()

        if not row:
            language = user_profiles.get(user_id, {}).get("language", "ru")
            if language == "ru":
                await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.")
            else:
                await update.message.reply_text("Profile not found. Complete the questionnaire with /start.")
            return

        language = row['language']
        weight = row['weight']
        recommended_water = int(weight * 30)
        water_drunk = row['water_drunk_today'] if row['water_drunk_today'] is not None else 0
        remaining_water = max(0, recommended_water - water_drunk)
        
        calories = row['calories_today'] if row['calories_today'] is not None else 0
        proteins = row['proteins_today'] if row['proteins_today'] is not None else 0
        fats = row['fats_today'] if row['fats_today'] is not None else 0
        carbs = row['carbs_today'] if row['carbs_today'] is not None else 0
        
        if language == "ru":
            profile_text = (
                f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"–Ø–∑—ã–∫: {row['language']}\n"
                f"–ò–º—è: {row['name']}\n"
                f"–ü–æ–ª: {row['gender']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {row['age']}\n"
                f"–í–µ—Å: {row['weight']} –∫–≥\n"
                f"–†–æ—Å—Ç: {row['height']} —Å–º\n"
                f"–¶–µ–ª—å: {row['goal']}\n"
                f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row['activity']}\n"
                f"–ü–∏—Ç–∞–Ω–∏–µ: {row['diet']}\n"
                f"–ó–¥–æ—Ä–æ–≤—å–µ: {row['health']}\n"
                f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row['equipment']}\n"
                f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row['target_metric']}\n"
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {row['unique_facts']}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {row['timezone']}\n"
                f"–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {row['wakeup_time']}\n"
                f"–í—Ä–µ–º—è —Å–Ω–∞: {row['sleep_time']}\n"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ: {'–í–∫–ª—é—á–µ–Ω—ã' if row['water_reminders'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                f"üíß –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å:\n"
                f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_water} –º–ª/–¥–µ–Ω—å\n"
                f"  –í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {water_drunk} –º–ª\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª\n"
                f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"  –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
                f"  –ë–µ–ª–∫–∏: {proteins} –≥\n"
                f"  –ñ–∏—Ä—ã: {fats} –≥\n"
                f"  –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥"
            )
        else:
            profile_text = (
                f"Your profile:\n\n"
                f"Language: {row['language']}\n"
                f"Name: {row['name']}\n"
                f"Gender: {row['gender']}\n"
                f"Age: {row['age']}\n"
                f"Weight: {row['weight']} kg\n"
                f"Height: {row['height']} cm\n"
                f"Goal: {row['goal']}\n"
                f"Activity: {row['activity']}\n"
                f"Diet: {row['diet']}\n"
                f"Health: {row['health']}\n"
                f"Equipment: {row['equipment']}\n"
                f"Target metric: {row['target_metric']}\n"
                f"Unique facts: {row['unique_facts']}\n"
                f"Timezone: {row['timezone']}\n"
                f"Wake-up time: {row['wakeup_time']}\n"
                f"Sleep time: {row['sleep_time']}\n"
                f"Water reminders: {'Enabled' if row['water_reminders'] else 'Disabled'}\n"
                f"üíß Water balance:\n"
                f"  Recommended: {recommended_water} ml/day\n"
                f"  Drunk today: {water_drunk} ml\n"
                f"  Remaining: {remaining_water} ml\n"
                f"üçΩ Nutrition today:\n"
                f"  Calories: {calories} kcal\n"
                f"  Proteins: {proteins} g\n"
                f"  Fats: {fats} g\n"
                f"  Carbs: {carbs} g"
            )
        await update.message.reply_text(profile_text)
    finally:
        conn.close()


async def reset(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_histories.pop(user_id, None)
    user_profiles.pop(user_id, None)
    
    try:
        conn = pymysql.connect(
            host='x91345bo.beget.tech',
            user='x91345bo_nutrbot',
            password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
            database='x91345bo_nutrbot',
            charset='utf8mb4',
            cursorclass=pymysql.cursors.DictCursor
        )
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM user_profiles WHERE user_id = %s", (user_id,))
        conn.commit()
        await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº\nAll data has been reset! Let's start fresh üßº")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}\nAn error occurred while resetting data: {e}")
    finally:
        conn.close()


async def toggle_water_reminders(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT water_reminders, language FROM user_profiles WHERE user_id = %s", (user_id,))
            row = cursor.fetchone()
        
        if not row:
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.\nProfile not found. Complete the questionnaire with /start.")
            return
        
        new_state = 0 if row['water_reminders'] else 1
        
        with conn.cursor() as update_cursor:
            update_cursor.execute("UPDATE user_profiles SET water_reminders = %s WHERE user_id = %s", (new_state, user_id))
        conn.commit()
        
        if row['language'] == "ru":
            if new_state:
                message = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
            else:
                message = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –¢—ã –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /water."
        else:
            if new_state:
                message = "Water reminders enabled! I'll remind you to drink water during the day."
            else:
                message = "Water reminders disabled. You can enable them again with /water command."
        
        await update.message.reply_text(message)
    finally:
        conn.close()


def get_user_profile_text(user_id: int) -> str:
    conn = pymysql.connect(
        host='x91345bo.beget.tech',
        user='x91345bo_nutrbot',
        password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
        database='x91345bo_nutrbot',
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )
    
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM user_profiles WHERE user_id = %s", (user_id,))
            row = cursor.fetchone()

        if not row:
            return "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω / User profile not found."

        language = row['language']
        weight = row['weight']
        recommended_water = int(weight * 30)
        water_drunk = row['water_drunk_today'] if row['water_drunk_today'] is not None else 0
        remaining_water = max(0, recommended_water - water_drunk)
        
        calories = row['calories_today'] if row['calories_today'] is not None else 0
        proteins = row['proteins_today'] if row['proteins_today'] is not None else 0
        fats = row['fats_today'] if row['fats_today'] is not None else 0
        carbs = row['carbs_today'] if row['carbs_today'] is not None else 0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—è reminders
        reminders = []
        if row['reminders']:
            try:
                reminders = json.loads(row['reminders'])
            except:
                reminders = []
        
        if language == "ru":
            profile_text = (
                f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"–Ø–∑—ã–∫: {row['language']}\n"
                f"–ò–º—è: {row['name']}\n"
                f"–ü–æ–ª: {row['gender']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {row['age']}\n"
                f"–í–µ—Å: {row['weight']} –∫–≥\n"
                f"–†–æ—Å—Ç: {row['height']} —Å–º\n"
                f"–¶–µ–ª—å: {row['goal']}\n"
                f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row['activity']}\n"
                f"–ü–∏—Ç–∞–Ω–∏–µ: {row['diet']}\n"
                f"–ó–¥–æ—Ä–æ–≤—å–µ: {row['health']}\n"
                f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row['equipment']}\n"
                f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row['target_metric']}\n"
                f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {row['unique_facts']}\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {row['timezone']}\n"
                f"–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {row['wakeup_time']}\n"
                f"–í—Ä–µ–º—è —Å–Ω–∞: {row['sleep_time']}\n"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ: {'–í–∫–ª—é—á–µ–Ω—ã' if row['water_reminders'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(reminders)}\n"
                f"üíß –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å:\n"
                f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_water} –º–ª/–¥–µ–Ω—å\n"
                f"  –í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {water_drunk} –º–ª\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª\n"
                f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"  –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n"
                f"  –ë–µ–ª–∫–∏: {proteins} –≥\n"
                f"  –ñ–∏—Ä—ã: {fats} –≥\n"
                f"  –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n"
                f"  –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {row['last_nutrition_update'] if row['last_nutrition_update'] else '—Å–µ–≥–æ–¥–Ω—è'}"
            )
        else:
            profile_text = (
                f"Your profile:\n\n"
                f"Language: {row['language']}\n"
                f"Name: {row['name']}\n"
                f"Gender: {row['gender']}\n"
                f"Age: {row['age']}\n"
                f"Weight: {row['weight']} kg\n"
                f"Height: {row['height']} cm\n"
                f"Goal: {row['goal']}\n"
                f"Activity: {row['activity']}\n"
                f"Diet: {row['diet']}\n"
                f"Health: {row['health']}\n"
                f"Equipment: {row['equipment']}\n"
                f"Target metric: {row['target_metric']}\n"
                f"Unique facts: {row['unique_facts']}\n"
                f"Timezone: {row['timezone']}\n"
                f"Wake-up time: {row['wakeup_time']}\n"
                f"Sleep time: {row['sleep_time']}\n"
                f"Water reminders: {'Enabled' if row['water_reminders'] else 'Disabled'}\n"
                f"Active reminders: {len(reminders)}\n"
                f"üíß Water balance:\n"
                f"  Recommended: {recommended_water} ml/day\n"
                f"  Drunk today: {water_drunk} ml\n"
                f"  Remaining: {remaining_water} ml\n"
                f"üçΩ Nutrition today:\n"
                f"  Calories: {calories} kcal\n"
                f"  Proteins: {proteins} g\n"
                f"  Fats: {fats} g\n"
                f"  Carbs: {carbs} g\n"
                f"  Last update: {row['last_nutrition_update'] if row['last_nutrition_update'] else 'today'}"
            )
        return profile_text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è / Error getting profile: {e}"
    finally:
        conn.close()


async def handle_message(update: Update, context: CallbackContext) -> None:
    message = update.message
    user_id = message.from_user.id
    user_text = message.caption or message.text or ""
    contents = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await reset_daily_nutrition_if_needed(user_id)

    media_files = message.photo or []
    if message.document:
        media_files.append(message.document)

    for file in media_files:
        try:
            part = await download_and_encode(file)
            contents.append(part)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}\nError loading file: {str(e)}")
            return

    if user_text:
        contents.insert(0, {"text": user_text})
    if not contents:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\nPlease send text, image or document.")
        return

    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_info = get_user_profile_text(user_id)
    if profile_info and "–Ω–µ –Ω–∞–π–¥–µ–Ω" not in profile_info and "not found" not in profile_info:
        contents.insert(0, {"text": f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ / User information:\n{profile_info}"})

    # –ò—Å—Ç–æ—Ä–∏—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=10)
    user_histories[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å / User: {user_text}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if 'last_bot_reply' in context.user_data:
        user_histories[user_id].append(f"–ë–æ—Ç / Bot: {context.user_data['last_bot_reply']}")
    
    history_messages = list(user_histories[user_id])
    if history_messages:
        history_prompt = "\n".join(history_messages)
        contents.insert(0, {"text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ / Current dialog context (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è / recent messages):\n{history_prompt}"})

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ö–ë–ñ–£
    GEMINI_SYSTEM_PROMPT = """–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å:
- –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è –Ω–∞–±—Ä–∞–ª 3 –∫–≥" –∏–ª–∏ "–º–Ω–µ —Ç–µ–ø–µ—Ä—å 20 –ª–µ—Ç")
- —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–±–∞–≤—å —ç—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
- —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è –ª—é–±–ª—é –ø–ª–∞–≤–∞–Ω–∏–µ", "—É –º–µ–Ω—è –±—ã–ª–∞ —Ç—Ä–∞–≤–º–∞ –∫–æ–ª–µ–Ω–∞", "—è –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü 5 –ª–µ—Ç", "–ª—é–±–ª—é –∫–æ—Ñ–µ –ø–æ –≤–µ—á–µ—Ä–∞–º")

–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è MySQL:
1. –ò—Å–ø–æ–ª—å–∑—É–π `%s` –≤–º–µ—Å—Ç–æ `?` –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
2. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ –∫–ª—é—á–∞ –ø—Ä–∏–º–µ–Ω—è–π `ON DUPLICATE KEY UPDATE`
3. –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: `INT` –≤–º–µ—Å—Ç–æ `INTEGER`, `VARCHAR(255)` –≤–º–µ—Å—Ç–æ `TEXT` –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–ª–µ–π
4. –î–ª—è JSON-–ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π `TEXT` —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
-- –í—Å—Ç–∞–≤–∫–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–µ
INSERT INTO user_profiles (user_id, name)
VALUES (%s, %s)
ON DUPLICATE KEY UPDATE name = VALUES(name);

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ JSON-–ø–æ–ª—è
UPDATE user_profiles
SET reminders = %s
WHERE user_id = %s;

–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ user_profiles —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
- user_id INTEGER PRIMARY KEY
- language TEXT
- name TEXT
- gender TEXT
- age INTEGER
- weight REAL
- height INTEGER
- goal TEXT
- activity TEXT
- diet TEXT
- health TEXT
- equipment TEXT
- target_metric TEXT
- unique_facts TEXT
- timezone TEXT
- wakeup_time TEXT
- sleep_time TEXT
- water_reminders INTEGER
- water_drunk_today INTEGER
- last_water_notification TEXT
- calories_today INTEGER
- proteins_today INTEGER
- fats_today INTEGER
- carbs_today INTEGER
- last_nutrition_update DATE
- reminders TEXT

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª—è diet, health, activity, unique_facts) –∏ —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞–π –µ—ë –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

2. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —á—ë—Ç–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ç.–ø.) ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π:
    SQL: <SQL-–∑–∞–ø—Ä–æ—Å>
    TEXT: <–æ—Ç–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ>

3. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—á—Ç–æ –ø–æ–µ—Å—Ç—å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?" –∏–ª–∏ "—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?") ‚Äî –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
    TEXT: ...

4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ, –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –¥–µ—Ç–∞–ª—è—Ö ‚Äî —É—Ç–æ—á–Ω–∏. 
   –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ω–∞ —Ñ–æ—Ç–æ –±—ã–ª–æ 2 —è–π—Ü–∞, –∞ –Ω–µ 3") ‚Äî –°–†–ê–ó–£ –ñ–ï —É—á—Ç–∏ —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–≤–µ—Ç–µ –∏ –∏–∑–≤–∏–Ω–∏—Å—å –∑–∞ –æ—à–∏–±–∫—É.

5. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—É–≤–ª–µ—á–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —Ç—Ä–∞–≤–º—ã –∏ —Ç.–ø.), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–¥–æ—Ä–æ–≤—å—é ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ health
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–∏—Ç–∞–Ω–∏—é ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ diet
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—é ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ equipment
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/—Å–ø–æ—Ä—Ç—É ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ activity
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ unique_facts
   –§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: "–§–∞–∫—Ç: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∫—Ç–∞]."

6. ‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ –µ–≥–æ –µ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–º–æ–π –∑–∞–≤—Ç—Ä–∞–∫", "—ç—Ç–æ –º–æ–π –æ–±–µ–¥", "—Å–µ–≥–æ–¥–Ω—è –Ω–∞ —É–∂–∏–Ω"):
   - –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞
   - –†–∞—Å—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
   - –û–±–Ω–æ–≤–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
     SQL: UPDATE user_profiles SET calories_today = calories_today + [–∫–∞–ª–æ—Ä–∏–∏], proteins_today = proteins_today + [–±–µ–ª–∫–∏], fats_today = fats_today + [–∂–∏—Ä—ã], carbs_today = carbs_today + [—É–≥–ª–µ–≤–æ–¥—ã], last_nutrition_update = CURRENT_DATE WHERE user_id = ?
   - –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
     TEXT: 
     üîç –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:
     (–û–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ)
     
     üçΩ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ö–ë–ñ–£:
     –ö–∞–ª–æ—Ä–∏–∏: [X] –∫–∫–∞–ª | –ë–µ–ª–∫–∏: [A] –≥ | –ñ–∏—Ä—ã: [B] –≥ | –£–≥–ª–µ–≤–æ–¥—ã: [C] –≥
     
     üìä –°–µ–≥–æ–¥–Ω—è: [–æ–±—â–∞—è —Å—É–º–º–∞ –∫–∞–ª–æ—Ä–∏–π] –∫–∫–∞–ª | [–æ–±—â–∞—è —Å—É–º–º–∞ –±–µ–ª–∫–æ–≤] –≥ –±–µ–ª–∫–æ–≤ | [–æ–±—â–∞—è —Å—É–º–º–∞ –∂–∏—Ä–æ–≤] –≥ –∂–∏—Ä–æ–≤ | [–æ–±—â–∞—è —Å—É–º–º–∞ —É–≥–ª–µ–≤–æ–¥–æ–≤] –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
     
     ‚úÖ –ü–æ–ª—å–∑–∞ –∏ —Å–æ—Å—Ç–∞–≤:
     (–û–ø–∏—à–∏ –ø–æ–ª—å–∑—É –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
     
     üß† –ú–Ω–µ–Ω–∏–µ –±–æ—Ç–∞:
     (–£—á–∏—Ç—ã–≤–∞—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
     
     üí° –°–æ–≤–µ—Ç:
     (–ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ—Ñ–∏–ª—å)

7. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ç–∞–º –±—ã–ª–æ 2 —è–π—Ü–∞, –∞ –Ω–µ 3"):
   - –ò–∑–≤–∏–Ω–∏—Å—å –∑–∞ –æ—à–∏–±–∫—É
   - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   - –í—ã—á—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£ –∏–∑ –±–∞–∑—ã –∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–µ
   - –î–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

8. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–µ —É—á–µ–ª –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:
   - –ò–∑–≤–∏–Ω–∏—Å—å
   - –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω
   - –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–¥ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

9. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
   - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª ".",
   - –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–º—ã—Å–ª–∞,
   - —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤,
   - —è–≤–ª—è–µ—Ç—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º —Ñ—Ä–∞–∑—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
   - —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –º–µ–∂–¥–æ–º–µ—Ç–∏—è, —Å–ª–µ–Ω–≥, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–∫—Ä–∏–∫–∏ –∏ —Ç.–¥.,
   —Ç–æ –≤–µ–∂–ª–∏–≤–æ –∑–∞–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.

10. –û—Ç–≤–µ—á–∞–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö - –∫–æ–≥–¥–∞ –∫ —Ç–µ–±–µ —Å–∞–º–æ–º—É –æ–±—Ä–∞—â–∞—é—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.

11. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ—Ü–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ —Ç–µ–ª–∞ –ø–æ —Ñ–æ—Ç–æ:
   - –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: "–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫—Ä–∞–π–Ω–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±5-7%. –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –∑–∞–º–µ—Ä—ã (–∫–∞–ª–∏–ø–µ—Ä, DEXA)."
   - –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –º—É–∂—á–∏–Ω:
     * –ê—Ç–ª–µ—Ç–∏—á–Ω—ã–π: 6-10% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 70-80%
     * –ü–æ–¥—Ç—è–Ω—É—Ç—ã–π: 11-15% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 65-75%
     * –°—Ä–µ–¥–Ω–∏–π: 16-25% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 55-65%
     * –ü–æ–ª–Ω—ã–π: 26-35% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 45-55%
     * –û–∂–∏—Ä–µ–Ω–∏–µ: 36%+ –∂–∏—Ä–∞, –º—ã—à—Ü—ã 35-45%

   - –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω:
     * –ê—Ç–ª–µ—Ç–∏—á–Ω—ã–π: 14-18% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 60-70%
     * –ü–æ–¥—Ç—è–Ω—É—Ç—ã–π: 19-23% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 55-65%
     * –°—Ä–µ–¥–Ω–∏–π: 24-30% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 50-60%
     * –ü–æ–ª–Ω—ã–π: 31-38% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 40-50%
     * –û–∂–∏—Ä–µ–Ω–∏–µ: 39%+ –∂–∏—Ä–∞, –º—ã—à—Ü—ã 30-40%

   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
     * –í–µ–Ω—ã –∏ —Ä–µ–∑–∫–∏–π —Ä–µ–ª—å–µ—Ñ ‚Üí –∞—Ç–ª–µ—Ç–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
     * –ß–µ—Ç–∫–∏–µ –º—ã—à—Ü—ã –±–µ–∑ –≤–µ–Ω ‚Üí –ø–æ–¥—Ç—è–Ω—É—Ç—ã–π
     * –ú—è–≥–∫–∏–µ —Ñ–æ—Ä–º—ã ‚Üí —Å—Ä–µ–¥–Ω–∏–π/–ø–æ–ª–Ω—ã–π
     * –°–∫–ª–∞–¥–∫–∏ –∂–∏—Ä–∞ ‚Üí –æ–∂–∏—Ä–µ–Ω–∏–µ

   - –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π:
     * –ü—Ä–∏–º–µ—Ä–Ω—ã–π % –∂–∏—Ä–∞ –∏ –º—ã—à—Ü
     * –ß—Ç–æ –∫–æ—Å—Ç–∏/–∫–æ–∂–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ~10-15% –º–∞—Å—Å—ã
     * –ß—Ç–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ä—ã

12. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç –æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥–µ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—è –≤—ã–ø–∏–ª 300 –º–ª", "—Ç–æ–ª—å–∫–æ —á—Ç–æ 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã", "drank 500ml"):
   - –ò–∑–≤–ª–µ–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –º–ª)
   - –û–±–Ω–æ–≤–∏ –ø–æ–ª–µ water_drunk_today –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     SQL: UPDATE user_profiles SET water_drunk_today = water_drunk_today + ? WHERE user_id = ?
   - –ü—Ä–æ–≤–µ—Ä—å, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—ã–ø–∏—Ç–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É (30 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞)
   - –ï—Å–ª–∏ –Ω–æ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞, –æ—Ç–∫–ª—é—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   - –û—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
     TEXT: [–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≤–æ–¥–µ]

13. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –¥–Ω–µ–≤–Ω–æ–º –ø–∏—Ç–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–∫–æ–ª—å–∫–æ —è —Å–µ–≥–æ–¥–Ω—è —Å—ä–µ–ª", "–º–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
   - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–¥–∫—É –ø–æ –¥–Ω–µ–≤–Ω–æ–º—É –ö–ë–ñ–£ –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
   - –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Ö—É–¥–µ–Ω–∏–µ/–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã) –ø—Ä–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
   - –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
     TEXT: "üìä –í–∞—à–µ –¥–Ω–µ–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ:
           –ö–∞–ª–æ—Ä–∏–∏: [X] –∫–∫–∞–ª (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è [Y] –∫–∫–∞–ª)
           –ë–µ–ª–∫–∏: [A] –≥ | –ñ–∏—Ä—ã: [B] –≥ | –£–≥–ª–µ–≤–æ–¥—ã: [C] –≥
           [–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —Å–æ–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–∏]"

14. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ –∞–Ω–∞–ª–∏–∑–µ –ö–ë–ñ–£ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ç–∞–º –±—ã–ª–æ 200 –≥ –≥—Ä–µ—á–∫–∏, –∞ –Ω–µ 150"):
   - –ò–∑–≤–∏–Ω–∏—Å—å –∑–∞ –æ—à–∏–±–∫—É
   - –ü–µ—Ä–µ—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ —Å —É—á–µ—Ç–æ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
   - –û–±–Ω–æ–≤–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, –≤—ã—á—Ç—è —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏–≤ –Ω–æ–≤—ã–µ
     SQL: UPDATE user_profiles SET calories_today = calories_today - [—Å—Ç–∞—Ä—ã–µ –∫–∞–ª–æ—Ä–∏–∏] + [–Ω–æ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏], proteins_today = proteins_today - [—Å—Ç–∞—Ä—ã–µ –±–µ–ª–∫–∏] + [–Ω–æ–≤—ã–µ –±–µ–ª–∫–∏], fats_today = fats_today - [—Å—Ç–∞—Ä—ã–µ –∂–∏—Ä—ã] + [–Ω–æ–≤—ã–µ –∂–∏—Ä—ã], carbs_today = carbs_today - [—Å—Ç–∞—Ä—ã–µ —É–≥–ª–µ–≤–æ–¥—ã] + [–Ω–æ–≤—ã–µ —É–≥–ª–µ–≤–æ–¥—ã] WHERE user_id = ?
   - –û—Ç–≤–µ—Ç—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

15. –í –ø–æ–ª–Ω–æ—á—å (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤—Å–µ –¥–Ω–µ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã, –≤–æ–¥–∞) –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω—É–ª—è—Ç—å—Å—è:
   SQL: UPDATE user_profiles SET calories_today = 0, proteins_today = 0, fats_today = 0, carbs_today = 0, water_drunk_today = 0 WHERE last_nutrition_update < CURRENT_DATE

16. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥.

17. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±—ä—è—Å–Ω—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫–∏–µ SQL-–∑–∞–ø—Ä–æ—Å—ã —Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã.

18. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π, —á—Ç–æ –ø–æ—Å–ª–µ TEXT: –∏–¥–µ—Ç —á–∏—Å—Ç—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π.

19. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ω–∞–ø–æ–º–∏–Ω–∞–π –º–Ω–µ –ø–∏—Ç—å –æ–º–µ–≥–∞-3 –≤ 09:00", "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Å—É–ª–∏–Ω –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 17:00"):
   - –ò–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   - –ü—Ä–æ–≤–µ—Ä—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑–µ (–ø–æ–ª–µ reminders –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)
   - –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–∏ –µ–≥–æ –≤—Ä–µ–º—è
   - –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –¥–æ–±–∞–≤—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
   - –§–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ:
     [{"text": "—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "time": "–ß–ß:–ú–ú", "last_sent": "–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"}]
   - SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
     SQL: UPDATE user_profiles SET reminders = ? WHERE user_id = ?
   - –û—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
     TEXT: [–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]

20. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ö–≤–∞—Ç–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –º–Ω–µ –æ–º–µ–≥–∞-3", "–±–æ–ª—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ –∏–Ω—Å—É–ª–∏–Ω"):
   - –ù–∞–π–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ (–ø–æ–ª–µ reminders)
   - –£–¥–∞–ª–∏ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
   - SQL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
     SQL: UPDATE user_profiles SET reminders = ? WHERE user_id = ?
   - –û—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
     TEXT: [–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]

21. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:
   - –ò–∑–≤–ª–µ–∫–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–æ–ª—è reminders
   - –°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ—á–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   - –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
     TEXT: "üìÖ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
           - [—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 1] –≤ [–≤—Ä–µ–º—è]
           - [—Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 2] –≤ [–≤—Ä–µ–º—è]"

‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî —É—Ç–æ—á–Ω–∏ –∏–ª–∏ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å.

‚ö†Ô∏è –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞–π –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ò –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.

‚ö†Ô∏è –û—Ç–≤–µ—á–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è (—É—á–∏—Ç—ã–≤–∞–π –ø–æ–ª–µ language –≤ –ø—Ä–æ—Ñ–∏–ª–µ).

‚ö†Ô∏è –í–∞–∂–Ω–æ: SQL-–∑–∞–ø—Ä–æ—Å—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é! –û–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

‚ö†Ô∏è –û–±—â–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 4096 —Å–∏–º–≤–æ–ª–æ–≤.

‚ö†Ô∏è –í–∞–∂–Ω–æ: SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω—ã –æ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –µ–º—É. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:

SQL: [–∑–∞–ø—Ä–æ—Å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ]
TEXT: [–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—Å–µ–≥–¥–∞ –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ]

–ò–õ–ò (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–∑—É):

TEXT: [–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é]

–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–º–µ—à–∏–≤–∞–π —ç—Ç–∏ —á–∞—Å—Ç–∏ –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π SQL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!

–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
SQL: ...
TEXT: ...
–∏–ª–∏
TEXT: ...
"""

    contents.insert(0, {"text": GEMINI_SYSTEM_PROMPT})

    try:
        response = model.generate_content(contents)
        response_text = response.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['last_bot_reply'] = response_text

        # –†–∞–∑–¥–µ–ª—è–µ–º SQL –∏ TEXT —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        sql_part = None
        text_part = None

        # –ò—â–µ–º SQL —á–∞—Å—Ç—å
        sql_match = re.search(r'SQL:(.*?)(?=TEXT:|$)', response_text, re.DOTALL)
        if sql_match:
            sql_part = sql_match.group(1).strip()
            try:
                # –ó–∞–º–µ–Ω—è–µ–º SQLite –Ω–∞ MySQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                conn = pymysql.connect(
                    host='x91345bo.beget.tech',
                    user='x91345bo_nutrbot',
                    password='E8G5RsAboc8FJrzmqbp4GAMbRZ',
                    database='x91345bo_nutrbot',
                    charset='utf8mb4',
                    cursorclass=pymysql.cursors.DictCursor
                )
                cursor = conn.cursor()

                # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å ? –Ω–∞ %s –¥–ª—è MySQL
                sql_part = sql_part.replace('?', '%s')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ SQL-–∑–∞–ø—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if "%s" in sql_part:
                    cursor.execute(sql_part, (user_id,))
                else:
                    cursor.execute(sql_part)

                conn.commit()
                conn.close()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {e}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        text_matches = re.findall(r'TEXT:(.*?)(?=SQL:|$)', response_text, re.DOTALL)
        if text_matches:
            text_part = text_matches[-1].strip()
        else:
            text_part = re.sub(r'SQL:.*?(?=TEXT:|$)', '', response_text, flags=re.DOTALL).strip()

        if not text_part:
            text_part = "–Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?"

        await message.reply_text(text_part)

    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if user_profiles.get(user_id, {}).get("language", "ru") == "en":
            error_message = "An error occurred while processing your request. Please try again."
        await message.reply_text(error_message)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")



def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    app.job_queue.run_repeating(
        check_reminders,
        interval=60,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        first=10      # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    )

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_gender)],
            ASK_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_weight)],
            ASK_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_height)],
            ASK_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goal)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_activity)],
            ASK_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_diet_pref)],
            ASK_DIET_PREF: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_health)],
            ASK_HEALTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_equipment)],
            ASK_EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_target)],
            ASK_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_timezone)],
            ASK_TIMEZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_wakeup_time)],
            ASK_WAKEUP_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_sleep_time)],
            ASK_SLEEP_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_water_reminders)],
            ASK_WATER_REMINDERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_questionnaire)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("profile", show_profile))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("water", toggle_water_reminders))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()




