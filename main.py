import os
import re
import base64
import aiohttp
import sqlite3
import telegram
from collections import deque
from telegram import Update, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
)
import google.generativeai as genai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")
if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

user_histories = {}
user_profiles = {}

(ASK_NAME, ASK_GENDER, ASK_AGE, ASK_WEIGHT, ASK_GOAL, ASK_ACTIVITY, ASK_DIET_PREF, ASK_HEALTH, ASK_EQUIPMENT, ASK_TARGET) = range(10)

def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_profiles (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        gender TEXT,
        age INTEGER,
        weight REAL,
        goal TEXT,
        activity TEXT,
        diet TEXT,
        health TEXT,
        equipment TEXT,
        target_metric TEXT
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_additional_data (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        data_type TEXT,
        data_value TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES user_profiles(user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

def save_user_profile(user_id: int, profile: dict):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR REPLACE INTO user_profiles 
    (user_id, name, gender, age, weight, goal, activity, diet, health, equipment, target_metric)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        profile.get("name"),
        profile.get("gender"),
        profile.get("age"),
        profile.get("weight"),
        profile.get("goal"),
        profile.get("activity"),
        profile.get("diet"),
        profile.get("health"),
        profile.get("equipment"),
        profile.get("target_metric"),
    ))
    
    conn.commit()
    conn.close()

def save_additional_user_data(user_id: int, data_type: str, data_value: str):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO user_additional_data (user_id, data_type, data_value)
    VALUES (?, ?, ?)
    ''', (user_id, data_type, data_value))
    
    conn.commit()
    conn.close()

def get_additional_user_data(user_id: int) -> str:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT data_type, data_value 
    FROM user_additional_data 
    WHERE user_id = ?
    ORDER BY timestamp DESC
    LIMIT 10
    ''', (user_id,))
    
    rows = cursor.fetchall()
    conn.close()
    
    if not rows:
        return ""
    
    return "\n".join([f"{row[0]}: {row[1]}" for row in rows])

async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
            mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
            return {
                "inline_data": {
                    "mime_type": mime_type,
                    "data": base64.b64encode(data).decode("utf-8"),
                }
            }

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã üôå\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_gender(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id] = {"name": update.message.text}
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):")
    return ASK_GENDER

async def ask_age(update: Update, context: CallbackContext) -> int:
    gender = update.message.text.lower()
    if gender not in ["–º", "–∂"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ '–º' –∏–ª–∏ '–∂'.")
        return ASK_GENDER
    
    user_profiles[update.message.from_user.id]["gender"] = gender
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return ASK_AGE

async def ask_weight(update: Update, context: CallbackContext) -> int:
    try:
        age = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return ASK_AGE
    
    user_profiles[update.message.from_user.id]["age"] = age
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
    return ASK_WEIGHT

async def ask_goal(update: Update, context: CallbackContext) -> int:
    try:
        weight = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º.")
        return ASK_WEIGHT
    
    user_profiles[update.message.from_user.id]["weight"] = weight
    await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ—Ç—å, –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –†–µ–ª—å–µ—Ñ, –ü—Ä–æ—Å—Ç–æ –ó–û–ñ)")
    return ASK_GOAL

async def ask_activity(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["goal"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–æ–ø—ã—Ç–∞? (–ù–æ–≤–∏—á–æ–∫, –°—Ä–µ–¥–Ω–∏–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)")
    return ASK_ACTIVITY

async def ask_diet_pref(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["activity"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–í–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)")
    return ASK_DIET_PREF

async def ask_health(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["diet"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?")
    return ASK_HEALTH

async def ask_equipment(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["health"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?")
    return ASK_EQUIPMENT

async def ask_target(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["equipment"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?")
    return ASK_TARGET

async def finish_questionnaire(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id]["target_metric"] = update.message.text
    name = user_profiles[user_id]["name"]
    
    save_user_profile(user_id, user_profiles[user_id])
    
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!")
    return ConversationHandler.END

async def show_profile(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    cursor.execute("SELECT * FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if not row:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    additional_data = get_additional_user_data(user_id)
    
    profile_text = (
        f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {row[1]}\n–ü–æ–ª: {row[2]}\n–í–æ–∑—Ä–∞—Å—Ç: {row[3]}\n–í–µ—Å: {row[4]} –∫–≥\n"
        f"–¶–µ–ª—å: {row[5]}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row[6]}\n–ü–∏—Ç–∞–Ω–∏–µ: {row[7]}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {row[8]}\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row[9]}\n–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row[10]}"
    )
    
    if additional_data:
        profile_text += "\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + additional_data
    
    await update.message.reply_text(profile_text)

async def reset(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_histories.pop(user_id, None)
    user_profiles.pop(user_id, None)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº")

async def generate_image(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API Gemini üé®")

def get_user_profile_text(user_id: int) -> str:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    cursor.execute("SELECT * FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if not row:
        return "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    additional_data = get_additional_user_data(user_id)
    
    profile_text = (
        f"–ò–º—è: {row[1]}\n"
        f"–ü–æ–ª: {row[2]}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {row[3]}\n"
        f"–í–µ—Å: {row[4]} –∫–≥\n"
        f"–¶–µ–ª—å: {row[5]}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row[6]}\n"
        f"–ü–∏—Ç–∞–Ω–∏–µ: {row[7]}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {row[8]}\n"
        f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row[9]}\n"
        f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row[10]}"
    )
    
    if additional_data:
        profile_text += "\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n" + additional_data
    
    return profile_text

async def handle_message(update: Update, context: CallbackContext) -> None:
    message = update.message
    user_id = message.from_user.id
    user_text = message.caption or message.text or ""
    
    contents = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    media_files = message.photo or []
    if message.document:
        media_files.append(message.document)
    
    for file in media_files:
        try:
            part = await download_and_encode(file)
            contents.append(part)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return
    
    if user_text:
        contents.insert(0, {"text": user_text})
    
    if not contents:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_info = get_user_profile_text(user_id)
    if profile_info and "–Ω–µ –Ω–∞–π–¥–µ–Ω" not in profile_info:
        contents.insert(0, {"text": f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{profile_info}"})
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=5)
    
    user_histories[user_id].append(user_text)
    history_messages = list(user_histories[user_id])
    
    if history_messages:
        history_prompt = "\n".join(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}" for msg in history_messages)
        contents.insert(0, {"text": f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{history_prompt}"})
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    GEMINI_SYSTEM_PROMPT = """–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å:
1. –ü—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
2. –û–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è –Ω–∞–±—Ä–∞–ª 3 –∫–≥" –∏–ª–∏ "–º–Ω–µ —Ç–µ–ø–µ—Ä—å 20 –ª–µ—Ç")
3. –°–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–±–∞–≤—å —ç—Ç–æ –≤ –º–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")

–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å:
1. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ user_profiles —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
   - user_id INTEGER PRIMARY KEY
   - equipment TEXT (—Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—è—Ç—ã–º–∏)

2. –¢–∞–±–ª–∏—Ü–∞ user_additional_data –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¥–æ–±–∞–≤—å —ç—Ç–æ –≤ –º–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"):
   - –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (equipment –≤ user_profiles):
     SQL: UPDATE user_profiles SET equipment = CASE WHEN equipment IS NULL OR equipment = '' THEN ? ELSE equipment || ', ' || ? END WHERE user_id = ?
     PARAMS: ['–Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç', '–Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç', user_id]
   - –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
     ADDITIONAL: equipment:–Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
   TEXT: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

2. –î–ª—è –¥—Ä—É–≥–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π:
   SQL: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
   TEXT: –æ—Ç–≤–µ—Ç

3. –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
   TEXT: –æ—Ç–≤–µ—Ç

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
SQL: –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
PARAMS: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
ADDITIONAL: —Ç–∏–ø:–∑–Ω–∞—á–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
TEXT: –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
"""
    
    contents.insert(0, {"text": GEMINI_SYSTEM_PROMPT})
    
    try:
        response = model.generate_content(contents)
        response_text = response.text.strip()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print("–û—Ç–≤–µ—Ç –æ—Ç Gemini:", response_text)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
        sql_match = re.search(r"SQL:\s*(.*?)\n(?:PARAMS|ADDITIONAL|TEXT):", response_text, re.DOTALL)
        params_match = re.search(r"PARAMS:\s*(.*?)\n(?:ADDITIONAL|TEXT):", response_text, re.DOTALL)
        
        if sql_match:
            sql_query = sql_match.group(1).strip()
            params = []
            
            if params_match:
                try:
                    params = eval(params_match.group(1).strip())
                except:
                    params = []
            
            try:
                conn = sqlite3.connect("users.db")
                cursor = conn.cursor()
                
                if params:
                    cursor.execute(sql_query, params)
                else:
                    cursor.execute(sql_query, (user_id,))
                
                conn.commit()
                conn.close()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {e}")
                await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        additional_match = re.search(r"ADDITIONAL:\s*(.*?)\nTEXT:", response_text, re.DOTALL)
        if additional_match:
            additional_data = additional_match.group(1).strip()
            try:
                data_type, data_value = additional_data.split(":", 1)
                save_additional_user_data(user_id, data_type.strip(), data_value.strip())
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        text_match = re.search(r"TEXT:\s*(.+)", response_text, re.DOTALL)
        if text_match:
            reply_text = text_match.group(1).strip()
            await message.reply_text(reply_text)
        else:
            await message.reply_text(response_text)
    
    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

def main():
    init_db()
    
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_gender)],
            ASK_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_weight)],
            ASK_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goal)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_activity)],
            ASK_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_diet_pref)],
            ASK_DIET_PREF: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_health)],
            ASK_HEALTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_equipment)],
            ASK_EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_target)],
            ASK_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_questionnaire)],
        },
        fallbacks=[],
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("profile", show_profile))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("generate_image", generate_image))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    main()
