import os
import re
import base64
import aiohttp
import sqlite3
import pytz
import telegram
from datetime import datetime, time
from collections import deque
from telegram import Update, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, CallbackContext, ConversationHandler
)
import google.generativeai as genai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

user_histories = {}
user_profiles = {}

(
    ASK_LANGUAGE, ASK_NAME, ASK_GENDER, ASK_AGE, ASK_WEIGHT, ASK_HEIGHT,
    ASK_GOAL, ASK_ACTIVITY, ASK_DIET_PREF, ASK_HEALTH, ASK_EQUIPMENT, 
    ASK_TARGET, ASK_TIMEZONE, ASK_WAKEUP_TIME, ASK_SLEEP_TIME, ASK_WATER_REMINDERS
) = range(16)

def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_profiles (
        user_id INTEGER PRIMARY KEY,
        language TEXT,
        name TEXT,
        gender TEXT,
        age INTEGER,
        weight REAL,
        height INTEGER,
        goal TEXT,
        activity TEXT,
        diet TEXT,
        health TEXT,
        equipment TEXT,
        target_metric TEXT,
        unique_facts TEXT,
        timezone TEXT,
        wakeup_time TEXT,
        sleep_time TEXT,
        water_reminders INTEGER DEFAULT 1,
        water_drunk_today INTEGER DEFAULT 0,
        last_water_notification TEXT
    )
    ''')
    conn.commit()
    conn.close()

def save_user_profile(user_id: int, profile: dict):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''
    INSERT OR REPLACE INTO user_profiles
    (user_id, language, name, gender, age, weight, height, goal, activity, diet, health, 
     equipment, target_metric, unique_facts, timezone, wakeup_time, sleep_time, 
     water_reminders, water_drunk_today, last_water_notification)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        profile.get("language"),
        profile.get("name"),
        profile.get("gender"),
        profile.get("age"),
        profile.get("weight"),
        profile.get("height"),
        profile.get("goal"),
        profile.get("activity"),
        profile.get("diet"),
        profile.get("health"),
        profile.get("equipment"),
        profile.get("target_metric"),
        profile.get("unique_facts"),
        profile.get("timezone"),
        profile.get("wakeup_time"),
        profile.get("sleep_time"),
        profile.get("water_reminders", 1),
        profile.get("water_drunk_today", 0),
        profile.get("last_water_notification", "")
    ))
    conn.commit()
    conn.close()

async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è / Hello! I'm your personal fitness assistant NutriBot. Please choose your preferred language:\n\n"
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π - –æ—Ç–ø—Ä–∞–≤—å 'ru'\n"
        "üá¨üáß English - send 'en'"
    )
    return ASK_LANGUAGE

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ask_* –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ) ...

async def ask_water_reminders(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    
    try:
        sleep_time = datetime.strptime(update.message.text, "%H:%M").time()
        user_profiles[user_id]["sleep_time"] = update.message.text
    except ValueError:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00)")
        else:
            await update.message.reply_text("Please enter time in HH:MM format (e.g. 23:00)")
        return ASK_SLEEP_TIME
    
    if language == "ru":
        await update.message.reply_text("–•–æ—á–µ—à—å –ª–∏ —Ç—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è? (–¥–∞/–Ω–µ—Ç)")
    else:
        await update.message.reply_text("Do you want to receive water drinking reminders during the day? (yes/no)")
    return ASK_WATER_REMINDERS

async def finish_questionnaire(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    language = user_profiles[user_id].get("language", "ru")
    answer = update.message.text.lower()
    
    if language == "ru":
        valid_answers = ["–¥–∞", "–Ω–µ—Ç"]
    else:
        valid_answers = ["yes", "no"]
    
    if answer not in valid_answers:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
        else:
            await update.message.reply_text("Please answer 'yes' or 'no'")
        return ASK_WATER_REMINDERS
    
    user_profiles[user_id]["water_reminders"] = 1 if answer in ["–¥–∞", "yes"] else 0
    user_profiles[user_id]["water_drunk_today"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–¥—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã
    name = user_profiles[user_id]["name"]
    save_user_profile(user_id, user_profiles[user_id])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    context.job_queue.run_repeating(
        check_water_reminder_time,
        interval=300,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        first=0,
        user_id=user_id,
        chat_id=update.message.chat_id
    )
    
    if language == "ru":
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, –µ—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–∫–ª—é—á–∏—à—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.\n"
            f"–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!"
        )
    else:
        await update.message.reply_text(
            f"Great, {name}! Questionnaire completed üéâ\n"
            f"I'll remind you to drink water during the day unless you disable this feature.\n"
            f"You can send me photos, text or documents - I'll help you with analysis and recommendations!"
        )
    return ConversationHandler.END

async def check_water_reminder_time(context: CallbackContext):
    job = context.job
    user_id = job.user_id
    chat_id = job.chat_id
    
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT timezone, wakeup_time, sleep_time, water_reminders, language, water_drunk_today, last_water_notification FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    
    if not row or not row[4]:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —è–∑—ã–∫–∞
        return
    
    timezone_str, wakeup_str, sleep_str, water_reminders, language, water_drunk, last_notification = row
    
    if not water_reminders:  # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if timezone_str:
            try:
                tz = pytz.timezone(timezone_str)
            except pytz.UnknownTimeZoneError:
                tz = pytz.UTC
        else:
            tz = pytz.UTC
            
        now = datetime.now(tz)
        current_time = now.time()
        today = now.date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if last_notification:
            last_notif_date = datetime.strptime(last_notification, "%Y-%m-%d %H:%M:%S").date()
            if last_notif_date != today:
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–¥—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
                conn = sqlite3.connect("users.db")
                cursor = conn.cursor()
                cursor.execute("UPDATE user_profiles SET water_drunk_today = 0 WHERE user_id = ?", (user_id,))
                conn.commit()
                conn.close()
                water_drunk = 0
        
        wakeup_time = datetime.strptime(wakeup_str, "%H:%M").time()
        sleep_time = datetime.strptime(sleep_str, "%H:%M").time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–¥—ä–µ–º–∞ –∏ —Å–Ω–∞
        if wakeup_time <= current_time <= sleep_time:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (30 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞)
            conn = sqlite3.connect("users.db")
            cursor = conn.cursor()
            cursor.execute("SELECT weight FROM user_profiles WHERE user_id = ?", (user_id,))
            weight = cursor.fetchone()[0]
            conn.close()
            
            recommended_water = int(weight * 30)  # –≤ –º–ª
            remaining_water = max(0, recommended_water - water_drunk)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–æ–¥—ä–µ–º–∞)
            wakeup_hour = wakeup_time.hour
            current_hour = current_time.hour
            hours_since_wakeup = (current_hour - wakeup_hour) % 24
            
            if hours_since_wakeup > 0 and hours_since_wakeup % 2 == 0 and current_time.minute < 30:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
                last_notif_hour = None
                if last_notification:
                    last_notif_datetime = datetime.strptime(last_notification, "%Y-%m-%d %H:%M:%S")
                    last_notif_hour = (last_notif_datetime.hour - wakeup_hour) % 24
                
                if last_notif_hour != hours_since_wakeup:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    conn = sqlite3.connect("users.db")
                    cursor = conn.cursor()
                    cursor.execute("UPDATE user_profiles SET last_water_notification = ? WHERE user_id = ?", 
                                 (now.strftime("%Y-%m-%d %H:%M:%S"), user_id))
                    conn.commit()
                    conn.close()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—ã–ø–∏—Ç—å —Å–µ–π—á–∞—Å (–ø—Ä–∏–º–µ—Ä–Ω–æ 1/8 –æ—Ç –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã)
                    water_to_drink_now = min(250, max(150, recommended_water // 8))
                    
                    if language == "ru":
                        message = (
                            f"üíß –ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å –≤–æ–¥—É! –°–µ–π—á–∞—Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–∏—Ç—å {water_to_drink_now} –º–ª.\n"
                            f"üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {water_drunk} –º–ª –∏–∑ {recommended_water} –º–ª\n"
                            f"üö∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª"
                        )
                    else:
                        message = (
                            f"üíß Don't forget to drink water! Now it's recommended to drink {water_to_drink_now} ml.\n"
                            f"üìä Today drunk: {water_drunk} ml of {recommended_water} ml\n"
                            f"üö∞ Remaining: {remaining_water} ml"
                        )
                    
                    await context.bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

async def show_profile(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        language = user_profiles.get(user_id, {}).get("language", "ru")
        if language == "ru":
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.")
        else:
            await update.message.reply_text("Profile not found. Complete the questionnaire with /start.")
        return

    language = row[1]  # language is the second column in the database
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
    weight = row[5]  # weight in kg
    recommended_water = int(weight * 30)  # 30 ml per kg
    water_drunk = row[18] if row[18] is not None else 0
    remaining_water = max(0, recommended_water - water_drunk)
    
    if language == "ru":
        profile_text = (
            f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–Ø–∑—ã–∫: {row[1]}\n"
            f"–ò–º—è: {row[2]}\n"
            f"–ü–æ–ª: {row[3]}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {row[4]}\n"
            f"–í–µ—Å: {row[5]} –∫–≥\n"
            f"–†–æ—Å—Ç: {row[6]} —Å–º\n"
            f"–¶–µ–ª—å: {row[7]}\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row[8]}\n"
            f"–ü–∏—Ç–∞–Ω–∏–µ: {row[9]}\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {row[10]}\n"
            f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row[11]}\n"
            f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row[12]}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {row[13]}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {row[14]}\n"
            f"–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {row[15]}\n"
            f"–í—Ä–µ–º—è —Å–Ω–∞: {row[16]}\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ: {'–í–∫–ª—é—á–µ–Ω—ã' if row[17] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üíß –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å:\n"
            f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_water} –º–ª/–¥–µ–Ω—å\n"
            f"  –í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {water_drunk} –º–ª\n"
            f"  –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª"
        )
    else:
        profile_text = (
            f"Your profile:\n\n"
            f"Language: {row[1]}\n"
            f"Name: {row[2]}\n"
            f"Gender: {row[3]}\n"
            f"Age: {row[4]}\n"
            f"Weight: {row[5]} kg\n"
            f"Height: {row[6]} cm\n"
            f"Goal: {row[7]}\n"
            f"Activity: {row[8]}\n"
            f"Diet: {row[9]}\n"
            f"Health: {row[10]}\n"
            f"Equipment: {row[11]}\n"
            f"Target metric: {row[12]}\n"
            f"Unique facts: {row[13]}\n"
            f"Timezone: {row[14]}\n"
            f"Wake-up time: {row[15]}\n"
            f"Sleep time: {row[16]}\n"
            f"Water reminders: {'Enabled' if row[17] else 'Disabled'}\n"
            f"üíß Water balance:\n"
            f"  Recommended: {recommended_water} ml/day\n"
            f"  Drunk today: {water_drunk} ml\n"
            f"  Remaining: {remaining_water} ml"
        )
    await update.message.reply_text(profile_text)

async def reset(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_histories.pop(user_id, None)
    user_profiles.pop(user_id, None)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM user_profiles WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº\nAll data has been reset! Let's start fresh üßº")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}\nAn error occurred while resetting data: {e}")

async def toggle_water_reminders(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cursor.execute("SELECT water_reminders, language FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    
    if not row:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é /start.\nProfile not found. Complete the questionnaire with /start.")
        return
    
    current_state, language = row
    new_state = 0 if current_state else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("UPDATE user_profiles SET water_reminders = ? WHERE user_id = ?", (new_state, user_id))
    conn.commit()
    conn.close()
    
    if language == "ru":
        if new_state:
            message = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
        else:
            message = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –¢—ã –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /water."
    else:
        if new_state:
            message = "Water reminders enabled! I'll remind you to drink water during the day."
        else:
            message = "Water reminders disabled. You can enable them again with /water command."
    
    await update.message.reply_text(message)

async def update_water_intake(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    text = update.message.text.lower()
    language = user_profiles.get(user_id, {}).get("language", "ru")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    amount = 0
    try:
        if language == "ru":
            if "–≤—ã–ø–∏–ª" in text or "–≤—ã–ø–∏–ª–∞" in text:
                parts = text.split()
                for i, part in enumerate(parts):
                    if part.isdigit():
                        amount = int(part)
                        if i+1 < len(parts) and parts[i+1] in ["–º–ª", "ml"]:
                            break  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª
                        elif i+1 < len(parts) and parts[i+1] in ["–ª", "l"]:
                            amount *= 1000  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –ª–∏—Ç—Ä—ã –≤ –º–ª
                            break
        else:
            if "drank" in text or "drunk" in text:
                parts = text.split()
                for i, part in enumerate(parts):
                    if part.isdigit():
                        amount = int(part)
                        if i+1 < len(parts) and parts[i+1] in ["ml"]:
                            break
                        elif i+1 < len(parts) and parts[i+1] in ["l", "liters"]:
                            amount *= 1000
                            break
    except:
        amount = 0
    
    if amount <= 0:
        if language == "ru":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–í—ã–ø–∏–ª 250 –º–ª' –∏–ª–∏ 'Drank 300 ml'")
        else:
            await update.message.reply_text("Please specify water amount in format: 'Drank 300 ml' or '–í—ã–ø–∏–ª 250 –º–ª'")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE user_profiles SET water_drunk_today = water_drunk_today + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT weight, water_drunk_today FROM user_profiles WHERE user_id = ?", (user_id,))
    weight, water_drunk = cursor.fetchone()
    conn.close()
    
    recommended_water = int(weight * 30)
    remaining_water = max(0, recommended_water - water_drunk)
    
    if language == "ru":
        message = (
            f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: +{amount} –º–ª –≤–æ–¥—ã\n"
            f"üìä –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {water_drunk} –º–ª –∏–∑ {recommended_water} –º–ª\n"
            f"üö∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª"
        )
    else:
        message = (
            f"‚úÖ Recorded: +{amount} ml water\n"
            f"üìä Today drunk: {water_drunk} ml of {recommended_water} ml\n"
            f"üö∞ Remaining: {remaining_water} ml"
        )
    
    await update.message.reply_text(message)

def get_user_profile_text(user_id: int) -> str:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM user_profiles WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        return "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω / User profile not found."

    language = row[1]  # language is the second column in the database
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã
    weight = row[5]  # weight in kg
    recommended_water = int(weight * 30)  # 30 ml per kg
    water_drunk = row[18] if row[18] is not None else 0
    remaining_water = max(0, recommended_water - water_drunk)
    
    if language == "ru":
        return (
            f"–Ø–∑—ã–∫: {row[1]}\n"
            f"–ò–º—è: {row[2]}\n"
            f"–ü–æ–ª: {row[3]}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {row[4]}\n"
            f"–í–µ—Å: {row[5]} –∫–≥\n"
            f"–†–æ—Å—Ç: {row[6]} —Å–º\n"
            f"–¶–µ–ª—å: {row[7]}\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {row[8]}\n"
            f"–ü–∏—Ç–∞–Ω–∏–µ: {row[9]}\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {row[10]}\n"
            f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {row[11]}\n"
            f"–¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞: {row[12]}\n"
            f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {row[13]}\n"
            f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {row[14]}\n"
            f"–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {row[15]}\n"
            f"–í—Ä–µ–º—è —Å–Ω–∞: {row[16]}\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ: {'–í–∫–ª—é—á–µ–Ω—ã' if row[17] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üíß –í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å:\n"
            f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {recommended_water} –º–ª/–¥–µ–Ω—å\n"
            f"  –í—ã–ø–∏—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {water_drunk} –º–ª\n"
            f"  –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water} –º–ª"
        )
    else:
        return (
            f"Language: {row[1]}\n"
            f"Name: {row[2]}\n"
            f"Gender: {row[3]}\n"
            f"Age: {row[4]}\n"
            f"Weight: {row[5]} kg\n"
            f"Height: {row[6]} cm\n"
            f"Goal: {row[7]}\n"
            f"Activity: {row[8]}\n"
            f"Diet: {row[9]}\n"
            f"Health: {row[10]}\n"
            f"Equipment: {row[11]}\n"
            f"Target metric: {row[12]}\n"
            f"Unique facts: {row[13]}\n"
            f"Timezone: {row[14]}\n"
            f"Wake-up time: {row[15]}\n"
            f"Sleep time: {row[16]}\n"
            f"Water reminders: {'Enabled' if row[17] else 'Disabled'}\n"
            f"üíß Water balance:\n"
            f"  Recommended: {recommended_water} ml/day\n"
            f"  Drunk today: {water_drunk} ml\n"
            f"  Remaining: {remaining_water} ml"
        )

async def handle_message(update: Update, context: CallbackContext) -> None:
    message = update.message
    user_id = message.from_user.id
    user_text = message.caption or message.text or ""
    contents = []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_text.lower() in [
        "–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –º–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç–æ–º, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–∏—Ç—å –≤–æ–¥—É",
        "–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–π –º–Ω–µ –ø–∏—Ç—å –≤–æ–¥—É",
        "–æ—Ç–∫–ª—é—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ",
        "stop water reminders",
        "don't remind me to drink water",
        "disable water reminders"
    ]:
        await toggle_water_reminders(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥–µ
    if ("–≤—ã–ø–∏–ª" in user_text.lower() or "–≤—ã–ø–∏–ª–∞" in user_text.lower() or 
        "drank" in user_text.lower() or "drunk" in user_text.lower()):
        await update_water_intake(update, context)
        return

    media_files = message.photo or []
    if message.document:
        media_files.append(message.document)

    for file in media_files:
        try:
            part = await download_and_encode(file)
            contents.append(part)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}\nError loading file: {str(e)}")
            return

    if user_text:
        contents.insert(0, {"text": user_text})
    if not contents:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\nPlease send text, image or document.")
        return

    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_info = get_user_profile_text(user_id)
    if profile_info and "–Ω–µ –Ω–∞–π–¥–µ–Ω" not in profile_info and "not found" not in profile_info:
        contents.insert(0, {"text": f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ / User information:\n{profile_info}"})

    # –ò—Å—Ç–æ—Ä–∏—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in user_histories:
        user_histories[user_id] = deque(maxlen=10)
    user_histories[user_id].append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å / User: {user_text}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if 'last_bot_reply' in context.user_data:
        user_histories[user_id].append(f"–ë–æ—Ç / Bot: {context.user_data['last_bot_reply']}")
    
    history_messages = list(user_histories[user_id])
    if history_messages:
        history_prompt = "\n".join(history_messages)
        contents.insert(0, {"text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ / Current dialog context (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è / recent messages):\n{history_prompt}"})

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∏–∑–º–µ–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –ø—Ä–æ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ)
    GEMINI_SYSTEM_PROMPT = """–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è. –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å:
- –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –ø–∏—Ç–∞–Ω–∏–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è –Ω–∞–±—Ä–∞–ª 3 –∫–≥" –∏–ª–∏ "–º–Ω–µ —Ç–µ–ø–µ—Ä—å 20 –ª–µ—Ç")
- —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ–±–∞–≤—å —ç—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
- —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è –ª—é–±–ª—é –ø–ª–∞–≤–∞–Ω–∏–µ", "—É –º–µ–Ω—è –±—ã–ª–∞ —Ç—Ä–∞–≤–º–∞ –∫–æ–ª–µ–Ω–∞", "—è –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü 5 –ª–µ—Ç", "–ª—é–±–ª—é –∫–æ—Ñ–µ –ø–æ –≤–µ—á–µ—Ä–∞–º")

–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ user_profiles —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
- user_id INTEGER PRIMARY KEY
- language TEXT
- name TEXT
- gender TEXT
- age INTEGER
- weight REAL
- height INTEGER
- goal TEXT
- activity TEXT
- diet TEXT
- health TEXT
- equipment TEXT
- target_metric TEXT
- unique_facts TEXT
- timezone TEXT
- wakeup_time TEXT
- sleep_time TEXT
- water_reminders INTEGER
- water_drunk_today INTEGER
- last_water_notification TEXT

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:

1. –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª—è diet, health, activity, unique_facts) –∏ —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞–π –µ—ë –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

2. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —á—ë—Ç–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–ª–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ç.–ø.) ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π:
    SQL: <SQL-–∑–∞–ø—Ä–æ—Å>
    TEXT: <–æ—Ç–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ>

3. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—á—Ç–æ –ø–æ–µ—Å—Ç—å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?" –∏–ª–∏ "—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?") ‚Äî –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
    TEXT: ...

4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ, –±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –¥–µ—Ç–∞–ª—è—Ö ‚Äî —É—Ç–æ—á–Ω–∏. 
   –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–Ω–∞ —Ñ–æ—Ç–æ –±—ã–ª–æ 2 —è–π—Ü–∞, –∞ –Ω–µ 3") ‚Äî –°–†–ê–ó–£ –ñ–ï —É—á—Ç–∏ —ç—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–≤–µ—Ç–µ –∏ –∏–∑–≤–∏–Ω–∏—Å—å –∑–∞ –æ—à–∏–±–∫—É.

5. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—É–≤–ª–µ—á–µ–Ω–∏—è, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —Ç—Ä–∞–≤–º—ã –∏ —Ç.–ø.), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–¥–æ—Ä–æ–≤—å—é ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ health
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–∏—Ç–∞–Ω–∏—é ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ diet
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—é ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ equipment
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/—Å–ø–æ—Ä—Ç—É ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ activity
   - –ï—Å–ª–∏ —Ñ–∞–∫—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–æ–ª–µ unique_facts
   –§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: "–§–∞–∫—Ç: [–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∫—Ç–∞]."

   –ü—Ä–∏–º–µ—Ä—ã:
   - "–Ø –ª—é–±–ª—é –∫–æ—Ñ–µ –ø–æ –≤–µ—á–µ—Ä–∞–º" ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ diet: "–§–∞–∫—Ç: –õ—é–±–∏—Ç –∫–æ—Ñ–µ –ø–æ –≤–µ—á–µ—Ä–∞–º."
   - "–£ –º–µ–Ω—è –±–æ–ª–∏—Ç —Å–ø–∏–Ω–∞" ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ health: "–§–∞–∫—Ç: –ë–æ–ª—å –≤ —Å–ø–∏–Ω–µ."
   - "–õ—é–±–ª—é –ø–ª–∞–≤–∞—Ç—å" ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ activity: "–§–∞–∫—Ç: –õ—é–±–∏—Ç –ø–ª–∞–≤–∞–Ω–∏–µ."
   - "–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º" ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ unique_facts: "–§–∞–∫—Ç: –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º."
   - "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–æ–±–∞–∫–∞" ‚Üí –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ unique_facts: "–§–∞–∫—Ç: –ï—Å—Ç—å —Å–æ–±–∞–∫–∞."

6. ‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ –µ–≥–æ –µ–¥–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

TEXT:
üîç –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:
(–û–ø–∏—à–∏ –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–Ω–æ –Ω–∞ —Ñ–æ—Ç–æ)

üçΩ –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ö–ë–ñ–£:
(–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–∏–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤)

‚úÖ –ü–æ–ª—å–∑–∞ –∏ —Å–æ—Å—Ç–∞–≤:
(–û–ø–∏—à–∏ –ø–æ–ª—å–∑—É –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)

üß† –ú–Ω–µ–Ω–∏–µ –±–æ—Ç–∞:
(–£—á–∏—Ç—ã–≤–∞—è –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

üí° –°–æ–≤–µ—Ç:
(–ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ —É–ª—É—á—à–∏—Ç—å, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ—Ñ–∏–ª—å)

7. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ç–∞–º –±—ã–ª–æ 2 —è–π—Ü–∞, –∞ –Ω–µ 3"):
- –ò–∑–≤–∏–Ω–∏—Å—å –∑–∞ –æ—à–∏–±–∫—É
- –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –î–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

8. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–µ —É—á–µ–ª –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:
- –ò–∑–≤–∏–Ω–∏—Å—å
- –û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω
- –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–¥ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

9. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ:
- —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª ".",
- –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–º—ã—Å–ª–∞,
- —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤,
- —è–≤–ª—è–µ—Ç—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º —Ñ—Ä–∞–∑—ã –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
- —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –º–µ–∂–¥–æ–º–µ—Ç–∏—è, —Å–ª–µ–Ω–≥, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–∫—Ä–∏–∫–∏ –∏ —Ç.–¥.,
—Ç–æ –≤–µ–∂–ª–∏–≤–æ –∑–∞–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.

10. –û—Ç–≤–µ—á–∞–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö - –∫–æ–≥–¥–∞ –∫ —Ç–µ–±–µ —Å–∞–º–æ–º—É –æ–±—Ä–∞—â–∞—é—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º.

11. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ—Ü–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ —Ç–µ–ª–∞ –ø–æ —Ñ–æ—Ç–æ:
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: "–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫—Ä–∞–π–Ω–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ¬±5-7%. –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –∑–∞–º–µ—Ä—ã (–∫–∞–ª–∏–ø–µ—Ä, DEXA)."
- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –º—É–∂—á–∏–Ω:
  * –ê—Ç–ª–µ—Ç–∏—á–Ω—ã–π: 6-10% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 70-80%
  * –ü–æ–¥—Ç—è–Ω—É—Ç—ã–π: 11-15% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 65-75%
  * –°—Ä–µ–¥–Ω–∏–π: 16-25% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 55-65%
  * –ü–æ–ª–Ω—ã–π: 26-35% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 45-55%
  * –û–∂–∏—Ä–µ–Ω–∏–µ: 36%+ –∂–∏—Ä–∞, –º—ã—à—Ü—ã 35-45%

- –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∂–µ–Ω—â–∏–Ω:
  * –ê—Ç–ª–µ—Ç–∏—á–Ω—ã–π: 14-18% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 60-70%
  * –ü–æ–¥—Ç—è–Ω—É—Ç—ã–π: 19-23% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 55-65%
  * –°—Ä–µ–¥–Ω–∏–π: 24-30% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 50-60%
  * –ü–æ–ª–Ω—ã–π: 31-38% –∂–∏—Ä–∞, –º—ã—à—Ü—ã 40-50%
  * –û–∂–∏—Ä–µ–Ω–∏–µ: 39%+ –∂–∏—Ä–∞, –º—ã—à—Ü—ã 30-40%

- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
  * –í–µ–Ω—ã –∏ —Ä–µ–∑–∫–∏–π —Ä–µ–ª—å–µ—Ñ ‚Üí –∞—Ç–ª–µ—Ç–∏—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  * –ß–µ—Ç–∫–∏–µ –º—ã—à—Ü—ã –±–µ–∑ –≤–µ–Ω ‚Üí –ø–æ–¥—Ç—è–Ω—É—Ç—ã–π
  * –ú—è–≥–∫–∏–µ —Ñ–æ—Ä–º—ã ‚Üí —Å—Ä–µ–¥–Ω–∏–π/–ø–æ–ª–Ω—ã–π
  * –°–∫–ª–∞–¥–∫–∏ –∂–∏—Ä–∞ ‚Üí –æ–∂–∏—Ä–µ–Ω–∏–µ

- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π:
  * –ü—Ä–∏–º–µ—Ä–Ω—ã–π % –∂–∏—Ä–∞ –∏ –º—ã—à—Ü
  * –ß—Ç–æ –∫–æ—Å—Ç–∏/–∫–æ–∂–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç ~10-15% –º–∞—Å—Å—ã
  * –ß—Ç–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ä—ã

- –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
  "–ü–æ —Ñ–æ—Ç–æ: % –∂–∏—Ä–∞ –æ–∫–æ–ª–æ 12-14% (–ø–æ–¥—Ç—è–Ω—É—Ç—ã–π), –º—ã—à—Ü—ã ~65-70%. –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–π - —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è."

12. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –∫—Ä–∞—Ç–∫–∏–º, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥.

‚ö†Ô∏è –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî —É—Ç–æ—á–Ω–∏ –∏–ª–∏ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å.

‚ö†Ô∏è –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ —É—á–∏—Ç—ã–≤–∞–π –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ò –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.

‚ö†Ô∏è –û—Ç–≤–µ—á–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è (—É—á–∏—Ç—ã–≤–∞–π –ø–æ–ª–µ language –≤ –ø—Ä–æ—Ñ–∏–ª–µ).

‚ö†Ô∏è –û–±—â–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 4096 —Å–∏–º–≤–æ–ª–æ–≤.

–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
SQL: ...
TEXT: ...
–∏–ª–∏
TEXT: ...
"""

    contents.insert(0, {"text": GEMINI_SYSTEM_PROMPT})

    try:
        response = model.generate_content(contents)
        response_text = response.text.strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['last_bot_reply'] = response_text

        # –†–∞–∑–¥–µ–ª–∏–º SQL –∏ TEXT
        sql_match = re.search(r"SQL:\s*(.*?)\nTEXT:", response_text, re.DOTALL)
        text_match = re.search(r"TEXT:\s*(.+)", response_text, re.DOTALL)

        if sql_match:
            sql_query = sql_match.group(1).strip()

            try:
                conn = sqlite3.connect("users.db")
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ SQL-–∑–∞–ø—Ä–æ—Å –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
                if "?" in sql_query:
                    cursor.execute(sql_query, (user_id,))
                else:
                    cursor.execute(sql_query)

                conn.commit()
                conn.close()
            except Exception as e:
                await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}\nError updating profile: {e}")
                return

        if text_match:
            reply_text = text_match.group(1).strip()
            await message.reply_text(reply_text)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å
            await message.reply_text(response_text)

    except Exception as e:
        await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}\nError generating response: {e}")


def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_gender)],
            ASK_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_weight)],
            ASK_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_height)],
            ASK_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goal)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_activity)],
            ASK_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_diet_pref)],
            ASK_DIET_PREF: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_health)],
            ASK_HEALTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_equipment)],
            ASK_EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_target)],
            ASK_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_timezone)],
            ASK_TIMEZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_wakeup_time)],
            ASK_WAKEUP_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_sleep_time)],
            ASK_SLEEP_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_water_reminders)],
            ASK_WATER_REMINDERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_questionnaire)],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("profile", show_profile))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("water", toggle_water_reminders))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
