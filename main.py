import os
import base64
import aiohttp
import telegram
from telegram import Update, File
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
from user_data_manager import get_user, update_user

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
user_states = {}       # –î–ª—è –∞–Ω–∫–µ—Ç—ã
user_histories = {}    # –î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = get_user(user_id)

    if user_data.get("goal"):
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {user_data.get('name', '–¥—Ä—É–≥')}! –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
        return

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã üôå")
    user_states[user_id] = {"step": "name"}
    await update.message.reply_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# --- –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ (/reset) ---
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_histories.pop(user_id, None)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞) ---
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ API Gemini. –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç Google!")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    message = update.message
    user_id = message.from_user.id
    user_text = message.text or message.caption or ""

    # === –ê–Ω–∫–µ—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
    if user_id in user_states:
        state = user_states[user_id]
        step = state.get("step")

        if step == "name":
            user_states[user_id]["name"] = user_text
            user_states[user_id]["step"] = "goal"
            await message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_text}! üí™ –ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?")
            return

        elif step == "goal":
            name = user_states[user_id]["name"]
            goal = user_text
            update_user(user_id, {"name": name, "goal": goal})
            user_states.pop(user_id, None)
            await message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏: {goal}")
            return

    # === –õ–æ–≥–∏–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –ò–ò ===
    contents = []

    media_files = message.photo or []
    if message.document:
        media_files.append(message.document)

    for file in media_files:
        try:
            part = await download_and_encode(file)
            contents.append(part)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return

    if user_text:
        contents.insert(0, {"text": user_text})

    if not contents:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    history = user_histories.get(user_id, [])
    history.append({"role": "user", "parts": contents})

    try:
        response = model.generate_content(history)
        reply = response.text.strip()
        # –û—á–∏—Å—Ç–∫–∞/–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if "bounding box detections" in reply and "`json" in reply:
            reply = reply.split("bounding box detections")[0].strip()
        if "–ù–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ" in reply:
            reply = reply.replace("–ù–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ", "\n\n–ù–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ")

        history.append({"role": "model", "parts": [reply]})
        user_histories[user_id] = history[-10:]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ –∏—Å—Ç–æ—Ä–∏–∏

        await message.reply_text(reply)
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("generate_image", generate_image))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    print("ü§ñ NutriBot –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ñ–∞–π–ª–æ–≤ –∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    app.run_polling()

if __name__ == "__main__":
    main()
