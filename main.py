import os
import base64
import aiohttp
import telegram
from telegram import Update, File
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai
from user_data_manager import get_user, update_user

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
user_states = {}       # –î–ª—è –∞–Ω–∫–µ—Ç—ã
user_histories = {}    # –î–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò


QUESTION_FLOW = [
    ("name", "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"),
    ("goal", "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –ø—Ä–æ—Å—Ç–æ –ó–û–ñ –∏ —Ç.–ø.)"),
    ("experience", "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞?"),
    ("food_prefs", "–ï—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–≤–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)"),
    ("health_limits", "–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?"),
    ("equipment", "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –¥–æ–º–∞ —Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã –∏–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å?"),
    ("metrics", "–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?")
]


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    update_user(user_id, {"question_index": 0})
    first_question = QUESTION_FLOW[0][1]
    await update.message.reply_text(first_question)

# --- –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ (/reset) ---
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_histories.pop(user_id, None)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞) ---
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ API Gemini. –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç Google!")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()
    user = get_user(user_id)

    question_index = user.get("question_index", 0)

    if question_index < len(QUESTION_FLOW):
        key, _ = QUESTION_FLOW[question_index]
        update_user(user_id, {key: text})

        question_index += 1
        if question_index < len(QUESTION_FLOW):
            next_question = QUESTION_FLOW[question_index][1]
            update_user(user_id, {"question_index": question_index})
            await update.message.reply_text(next_question)
        else:
            update_user(user_id, {"question_index": None})
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É üéØ –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–∏!")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("generate_image", generate_image))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    print("ü§ñ NutriBot –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ñ–∞–π–ª–æ–≤ –∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    app.run_polling()

if __name__ == '__main__':
    import os
    from dotenv import load_dotenv
    load_dotenv()

    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
