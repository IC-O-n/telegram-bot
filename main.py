import os
import base64
import aiohttp
import telegram
from telegram import Update, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, CallbackContext, ConversationHandler
)
import google.generativeai as genai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
GOOGLE_API_KEY = os.getenv("GEMINI_API_KEY")

if not TOKEN or not GOOGLE_API_KEY:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –∏–ª–∏ Google Gemini API.")

genai.configure(api_key=GOOGLE_API_KEY)

# –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
model = genai.GenerativeModel("gemini-2.0-flash")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
user_histories = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_profiles = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
(
    ASK_NAME, ASK_GENDER, ASK_AGE, ASK_WEIGHT, ASK_GOAL,
    ASK_ACTIVITY, ASK_DIET_PREF, ASK_HEALTH, ASK_EQUIPMENT, ASK_TARGET
) = range(10)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
async def download_and_encode(file: File) -> dict:
    telegram_file = await file.get_file()
    async with aiohttp.ClientSession() as session:
        async with session.get(telegram_file.file_path) as resp:
            data = await resp.read()
    mime_type = file.mime_type if hasattr(file, 'mime_type') else "image/jpeg"
    return {
        "inline_data": {
            "mime_type": mime_type,
            "data": base64.b64encode(data).decode("utf-8"),
        }
    }

# === –ê–Ω–∫–µ—Ç–∞ ===

async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç NutriBot. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –∫–æ—Ä–æ—Ç–∫–æ–π –∞–Ω–∫–µ—Ç—ã üôå\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_gender(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id] = {"name": update.message.text}
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º/–∂):")
    return ASK_GENDER

async def ask_age(update: Update, context: CallbackContext) -> int:
    gender = update.message.text.lower()
    if gender not in ["–º", "–∂"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ '–º' –∏–ª–∏ '–∂'.")
        return ASK_GENDER
    user_profiles[update.message.from_user.id]["gender"] = gender
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return ASK_AGE

async def ask_weight(update: Update, context: CallbackContext) -> int:
    try:
        age = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return ASK_AGE
    user_profiles[update.message.from_user.id]["age"] = age
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥)?")
    return ASK_WEIGHT

async def ask_goal(update: Update, context: CallbackContext) -> int:
    try:
        weight = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º.")
        return ASK_WEIGHT
    user_profiles[update.message.from_user.id]["weight"] = weight
    await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å? (–ü–æ—Ö—É–¥–µ—Ç—å, –ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É, –†–µ–ª—å–µ—Ñ, –ü—Ä–æ—Å—Ç–æ –ó–û–ñ)")
    return ASK_GOAL

async def ask_activity(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["goal"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–æ–ø—ã—Ç–∞? (–ù–æ–≤–∏—á–æ–∫, –°—Ä–µ–¥–Ω–∏–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)")
    return ASK_ACTIVITY

async def ask_diet_pref(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["activity"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ? (–í–µ–≥–∞–Ω—Å—Ç–≤–æ, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–ø.)")
    return ASK_DIET_PREF

async def ask_health(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["diet"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?")
    return ASK_HEALTH
async def ask_equipment(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["health"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å/—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã —É —Ç–µ–±—è –µ—Å—Ç—å?")
    return ASK_EQUIPMENT

async def ask_target(update: Update, context: CallbackContext) -> int:
    user_profiles[update.message.from_user.id]["equipment"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –ø–æ –≤–µ—Å—É –∏–ª–∏ –¥—Ä—É–≥–∏–º –º–µ—Ç—Ä–∏–∫–∞–º?")
    return ASK_TARGET

async def finish_questionnaire(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_profiles[user_id]["target_metric"] = update.message.text
    name = user_profiles[user_id]["name"]
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üéâ –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏!")
    return ConversationHandler.END

# –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏
async def reset(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    user_histories.pop(user_id, None)
    user_profiles.pop(user_id, None)
    await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üßº")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
async def generate_image(update: Update, context: CallbackContext) -> None:
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å! –ù–∞–ø—Ä–∏–º–µ—Ä:\n/generate_image —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±—É—Ä–≥–µ—Ä")
        return
    await update.message.reply_text("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ API Gemini. –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç Google!")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext) -> None:
    message = update.message
    user_id = message.from_user.id
    user_text = message.caption or message.text or ""
    contents = []

    media_files = message.photo or []
    if message.document:
        media_files.append(message.document)

    for file in media_files:
        try:
            part = await download_and_encode(file)
            contents.append(part)
        except Exception as e:
            await message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return

    if user_text:
        contents.insert(0, {"text": user_text})

    if not contents:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    history = user_histories.get(user_id, [])

    try:
        history.append({"role": "user", "parts": contents})
        response = model.generate_content(history)
        reply = response.text.strip()

        if "bounding box detections" in reply and "`json" in reply:
            reply = reply.split("bounding box detections")[0].strip()
        if "–ù–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ" in reply:
            reply = reply.replace("–ù–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ", "\n\n–ù–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ")

        history.append({"role": "model", "parts": [reply]})
        user_histories[user_id] = history[-10:]
        await message.reply_text(f"{reply}")
    except Exception as e:
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    questionnaire_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_gender)],
            ASK_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_weight)],
            ASK_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goal)],
            ASK_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_activity)],
            ASK_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_diet_pref)],
            ASK_DIET_PREF: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_health)],
            ASK_HEALTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_equipment)],
            ASK_EQUIPMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_target)],
            ASK_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_questionnaire)],
        },
        fallbacks=[],
    )

    app.add_handler(questionnaire_handler)
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("generate_image", generate_image))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))

    print("ü§ñ NutriBot –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ñ–∞–π–ª–æ–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ + –∞–Ω–∫–µ—Ç–æ–π.")
    app.run_polling()



if __name__ == "__main__":
    main()


import sqlite3
from aiogram.types import Message

# –°–æ–∑–¥–∞–µ–º/–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    gender TEXT,
    age INTEGER,
    food_preferences TEXT
)
''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(user_id, username, full_name):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user is None:
        cursor.execute("INSERT INTO users (user_id, username, full_name) VALUES (?, ?, ?)",
                       (user_id, username, full_name))
        conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è
def update_user_field(user_id, field, value):
    cursor.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (value, user_id))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

# –ü—Ä–∏–º–µ—Ä —Ö–µ–Ω–¥–ª–µ—Ä–∞, –≥–¥–µ –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@dp.message_handler(commands=['start'])
async def start_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "none"
    full_name = message.from_user.full_name
    save_user(user_id, username, full_name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {full_name}! –Ø –∑–∞–ø–æ–º–Ω—é —Ç–µ–±—è :)")

# –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –µ–¥–µ
@dp.message_handler(lambda message: message.text.startswith("–ú–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ:"))
async def set_food_preference(message: Message):
    user_id = message.from_user.id
    food = message.text.replace("–ú–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ:", "").strip()
    update_user_field(user_id, "food_preferences", food)
    await message.answer(f"–ó–∞–ø–æ–º–Ω–∏–ª, —Ç—ã –ª—é–±–∏—à—å {food}")

# –ü—Ä–∏–º–µ—Ä: –±–æ—Ç –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—é–±–∏—Ç
@dp.message_handler(commands=["—á—Ç–æ_–ª—é–±–ª—é"])
async def what_do_i_love(message: Message):
    user_data = get_user_data(message.from_user.id)
    if user_data and user_data[5]:  # food_preferences
        await message.answer(f"–¢—ã –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –ª—é–±–∏—à—å {user_data[5]}")
    else:
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å üôÅ")

@dp.message_handler(lambda message: message.text.isdigit() and 5 < int(message.text) < 120)
async def set_age(message: Message):
    user_id = message.from_user.id
    age = int(message.text)
    update_user_field(user_id, "age", age)
    await message.answer("–ó–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç!")


@dp.message_handler(lambda message: message.text.lower() in ["–º", "–∂", "–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"])
async def set_gender(message: Message):
    user_id = message.from_user.id
    gender = message.text.lower()
    update_user_field(user_id, "gender", gender)
    await message.answer("–ó–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –ø–æ–ª!")


@dp.message_handler(commands=["–∞–Ω–∫–µ—Ç–∞"])
async def show_profile(message: Message):
    user_data = get_user_data(message.from_user.id)
    if user_data:
        user_id, username, full_name, gender, age, food = user_data
        await message.answer(
            f"–í–æ—Ç —á—Ç–æ —è –æ —Ç–µ–±–µ –∑–Ω–∞—é:\n"
            f"–ò–º—è: {full_name}\n"
            f"–ü–æ–ª: {gender or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–õ—é–±–∏–º–∞—è –µ–¥–∞: {food or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
        )
    else:
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –æ —Ç–µ–±–µ –Ω–µ –∑–Ω–∞—éüôÅ")
